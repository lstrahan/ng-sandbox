{"version":3,"sources":["ng://ags-hmi-library/lib/material.module.ts","ng://ags-hmi-library/lib/other/pipes.ts","node_modules/tslib/tslib.es6.js","ng://ags-hmi-library/lib/models/annotation.ts","ng://ags-hmi-library/lib/services/log.service.ts","ng://ags-hmi-library/lib/other/util.ts","ng://ags-hmi-library/lib/services/annotation.service.ts","ng://ags-hmi-library/lib/components/annotation/annotation.component.ts","ng://ags-hmi-library/lib/components/page-not-found/page-not-found.component.ts","ng://ags-hmi-library/lib/components/progress/progress.component.ts","ng://ags-hmi-library/lib/components/title/title.component.ts","ng://ags-hmi-library/lib/models/authentication.ts","ng://ags-hmi-library/lib/services/authentication.service.ts","ng://ags-hmi-library/lib/components/login/login.component.ts","ng://ags-hmi-library/lib/components/empty/empty.component.ts","ng://ags-hmi-library/lib/models/capability.ts","ng://ags-hmi-library/lib/models/vulnerability.ts","ng://ags-hmi-library/lib/models/domain.ts","ng://ags-hmi-library/lib/models/entity.ts","ng://ags-hmi-library/lib/services/cache.service.ts","ng://ags-hmi-library/lib/services/entity.service.ts","ng://ags-hmi-library/lib/components/entity-selector/entity-selector.component.ts","ng://ags-hmi-library/lib/components/chip-display/chip-display.component.ts","ng://ags-hmi-library/lib/components/date-time-picker/date-time-picker.component.ts","ng://ags-hmi-library/lib/services/icon.service.ts","ng://ags-hmi-library/lib/components/state-icon/state-icon.component.ts","ng://ags-hmi-library/lib/ags-hmi-library.module.ts","ng://ags-hmi-library/lib/services/alert.service.ts","ng://ags-hmi-library/lib/services/cal.service.ts","ng://ags-hmi-library/lib/services/draftPlan.service.ts","ng://ags-hmi-library/lib/models/plan.ts","ng://ags-hmi-library/lib/services/plan.service.ts","ng://ags-hmi-library/lib/services/progress.service.ts","ng://ags-hmi-library/lib/services/task-order.service.ts","ng://ags-hmi-library/lib/services/time.service.ts","ng://ags-hmi-library/lib/services/header.service.ts","ng://ags-hmi-library/lib/services/planCollection.service.ts","ng://ags-hmi-library/lib/services/czml.service.ts","ng://ags-hmi-library/lib/services/scheduler.service.ts","ng://ags-hmi-library/lib/services/externalSchedule.service.ts","ng://ags-hmi-library/lib/models/access-window-limit.ts","ng://ags-hmi-library/lib/models/alert.ts","ng://ags-hmi-library/lib/models/missionData.ts","ng://ags-hmi-library/lib/models/missionTarget.ts","ng://ags-hmi-library/lib/models/missionTask.ts","ng://ags-hmi-library/lib/models/optimizationMetric.ts","ng://ags-hmi-library/lib/models/optimizationObjective.ts","ng://ags-hmi-library/lib/models/planAsset.ts","ng://ags-hmi-library/lib/models/task.ts","ng://ags-hmi-library/lib/models/taskSubType.ts","ng://ags-hmi-library/lib/models/optimization.ts","ng://ags-hmi-library/lib/models/taskConstraint.ts","ng://ags-hmi-library/lib/models/accessWindow.ts","ng://ags-hmi-library/lib/models/timeWindow.ts","ng://ags-hmi-library/lib/models/planCollection.ts","ng://ags-hmi-library/lib/models/planCollectionType.ts","ng://ags-hmi-library/lib/models/displayWindow.ts","ng://ags-hmi-library/lib/models/spsEvent.ts","ng://ags-hmi-library/lib/other/auth.guard.ts","ng://ags-hmi-library/lib/other/enums.ts","ng://ags-hmi-library/lib/other/interceptors.ts","ng://ags-hmi-library/lib/other/mock-backend.interceptor.ts","ng://ags-hmi-library/lib/other/validators.ts","ng://ags-hmi-library/lib/models/alertType.ts","ng://ags-hmi-library/lib/models/planSubType.ts"],"names":["MaterialModule","NgModule","args","imports","MatAutocompleteModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatTableModule","MatBottomSheetModule","MatDialogModule","MatExpansionModule","MatFormFieldModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatSelectModule","MatSidenavModule","MatTabsModule","MatToolbarModule","MatTooltipModule","exports","DateFormatPipe","prototype","transform","theDate","defaultVal","forceUtc","moment","isValid","utc","format","toUpperCase","Pipe","name","TruncatePipe","s","length","slice","OrderByPipe","array","asc","_this","this","Array","from","sort","item1","item2","orderByComparator","a","b","toLowerCase","HighlightPipe","sanitizer","text","searchTerms","isArray","join","pattern","replace","split","filter","t","regex","RegExp","bypassSecurityTrustHtml","match","DomSanitizer","RemoveItemPipe","items","itemToRemove","item","localeCompare","hasOwnProperty","CustomPipes","__assign","Object","assign","i","n","arguments","p","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","Annotation","json","userLogon","lastUpdated","id","objectId","annotationType","noteType","narrative","confidence","annotationId","serialize","classToPlain","__decorate","decorators","target","key","desc","d","c","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","tslib_1.__decorate","Expose","__metadata","metadataKey","metadataValue","metadata","LogService","isLocalhost","isDevMode","window","location","hostname","toLocaleLowerCase","debug","msg","_i","console","log","local","info","warn","highlight","background","Injectable","providedIn","Util","newGuid","Date","getTime","Math","random","floor","toString","urlJoin","strArray","resultArray","first","shift","component","TypeError","str","parts","overrideConsole","methods","intercept","method","original","message","contrastColor","hexColor","rgb","hexToRgb","g","colorFromRgb","componentToHex","hex","rgbToHex","result","exec","parseInt","httpOptions","headers","HttpHeaders","Content-Type","AnnotationService","http","logService","serviceUrl","init","getAnnotations","url","get","pipe","tap","res","map","createAnnotation","annotation","post","updateAnnotation","put","HttpClient","AnnotationComponent","formBuilder","annotationService","annotationsFormGroup","group","factsCtrl","updateOn","assumptionsCtrl","ngOnInit","valueChanges","subscribe","x","dirty","valid","updateAnnotations","markAsPristine","ngOnChanges","Error","annotations","newAnnotation","factAnnotations","assumptionAnnotations","controls","setValue","Component","selector","template","FormBuilder","Input","PageNotFoundComponent","ProgressComponent","ngAfterViewInit","hideComponent","el","document","getElementById","style","display","encapsulation","ViewEncapsulation","None","TitleComponent","onCancel","EventEmitter","onClick","emit","Output","AuthenticationRequest","userName","password","AuthenticationResponse","authenticated","displayName","reason","token","AuthenticationService","router","loginRoute","AUTHENICATE","GET_DOMAINS","HTTP_OPTIONS","accept","USERINFO_KEY","isCurrentlyLoggedIn","username","getUsernameFromStorage","redirectToLoginPage","navigateByUrl","getAuthenticationServicePrefix","userInfo","getUserInfoFromStorage","getDisplayNameFromStorage","getTokenFromStorage","sessionStorage","getItem","JSON","parse","putUserInfoInStorage","setItem","getAllDomains","logIn","domain","authenticationRequest","response","stringify","authenticationResponse","logOut","localStorage","removeItem","clear","Router","LoginComponent","route","authenticationService","appName","returnUrl","ERROR_MESSAGES","loginMessage","domainList","selectedDomain","loginFailed","submitted","queryParams","params","createForm","ngAfterContentInit","nativeElement","focus","loginForm","disabled","Validators","required","err","handleOnFocus","markAsUntouched","ActivatedRoute","ViewChild","EmptyComponent","Capability","capabilityId","description","capabilityMapId","preExecutionTime","postExecutionTime","reliabilityProbability","probabilityOfSuccess","isDedicated","assessTime","priority","executionTime","elevationMinLimit","elevationMaxLimit","earthLimbAltLimit","qualityScore","lunarExclusionAngle","applyLightingConstraints","solarExclusionAngle","applySolarDarknessConstraint","rangeMin","rangeMax","azimuthMinLimit","azimuthMaxLimit","CapabilityMap","capabilityType","uciCapabilityTypeName","uciTaskTypeName","hasTarget","Observability","observingCapabilityMapId","observingCapabilityType","usedCapabilityMapId","usedCapabilityType","capabilityDomain","Vulnerability","fromJson","vulnerabilityId","vulnerabilityName","Domain","domainType","agsEntityId","sccNum","orbitType","constellation","intlDesignator","launchSite","launchDate","decayDate","tles","waypoints","Country","code","Entity","entityType","owner","sic","countryCodeAlpha5","affiliation","colorName","parentId","childrenIds","groupIds","capabilities","vulnerabilities","PartialEntity","entityId","countryName","scc","country","groups","Group","capabilityTypes","groupName","groupId","entityCount","BaseEntity","entity","CacheService","cache","Map","DEFAULT_MAX_AGE","fallback","maxAge","hasValidCachedValue","of","Observable","set","observableThrowError","expiry","now","has","delete","EntityService","cacheService","GET_ENTITY","GET_ENTITIES_BY_SUBSTRING","GET_ALL_CAPABILITY_TYPES","GET_ALL_CAPABILITY_MAPS","GET_ALL_VULNERABILITIES","GET_ALL_AFFILIATIONS","GET_ALL_COUNTRIES","CREATE_GROUP","GET_ALL_ENTITY_GROUPS","GET_ENTITIES_BY_GROUP","GET_PARTIAL_ENTITIES_BY_GROUP","PARTIAL_ENTITIES_BY_SUBSTRINGS","UPDATE_ENTITY","ADD_OR_UPDATE_CAPABILITY_MAP","ADD_OR_UPDATE_OBSERVABILITY","DELETE_ENTITIES","DELETE_CAPABILITY_MAPS","DELETE_OBSERVABILITY","DELETE_GROUPS","DEFAULT_SEARCH_TYPES","getAllCapabilityTypes","useCache","n1","n2","getAllCapabilityMaps","compareCapabilityMap","getObservabilitiesByUsedCapabilityMapId","getAllVulnerabilities","compareVulnerability","getCapabilitiesByObservableType","observableType","getAllAffiliations","getAllCountries","compareCountry","keyValuePairs","createGroup","entityIds","encodeURIComponent","data","strings","getAllEntityGroups","compareGroup","getEntity","getEntityById","addEntity","updateEntity","addCapabilityMap","capabilityMap","updateCapabilityMap","getPartialEntitiesByGroup","comparePartialEntity","partialEntitiesBySubstrings","searchTypes","searchParms","deleteEntities","deleteOptions","responseType","body","deleteCapabilities","capabilityIds","addObservabilities","observabilities","addRequests","forEach","addObservability","forkJoin","observability","deleteObservabilities","deleteRequests","deleteObservability","deleteGroups","rethrowError","status","Response","loadEntities","INVALID_ENTITY","EntitySelectorComponent","ngControl","entityService","label","entities","hasFocus","incomingEntity","selectedEntity","isSearching","valueAccessor","writeValue","registerOnChange","fn","onChange","registerOnTouched","onTouched","inputCtrl","FormControl","optionsCtrl","entitySelectionFormGroup","FormGroup","debounceTime","switchMap","term","empty","reset","displayEntityAs","trim","onFocus","event","onBlur","onSelected","source","onMouseDown","emitEvent","getTitle","title","formatResults","searchTerm","terms","groupText","firstGroup","areAllTermsFound","termsToSearchFor","stringToSearch","found","indexOf","NgControl","type","Optional","Self","ChipDisplayComponent","allowDuplicates","enabled","equalityProperty","selectedItems","determineRemainingSelectableItems","changes","selectableItems","remainingSelectableItems","onRemoved","index","splice","findItemInList","list","itemValueType","compareNumbers","compareStrings","compareObjects","MY_CUSTOM_FORMATS","parseInput","fullPickerInput","datePickerInput","timePickerInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","DateTimePickerComponent","fm","elRef","nextId","describedBy","stateChanges","Subject","focused","errorState","controlType","_required","_disabled","_momentValue","monitor","origin","inValue","setDisabledState","isDisabled","_placeholder","coerceBooleanProperty","toISOString","newVal","ngOnDestroy","complete","stopMonitoring","setDescribedByIds","ids","onContainerClick","tagName","querySelector","onDataChanged","toObject","providers","provide","MatFormFieldControl","useExisting","DateTimeAdapter","useClass","MomentDateTimeAdapter","deps","OWL_DATE_TIME_LOCALE","OWL_DATE_TIME_FORMATS","useValue","FocusMonitor","ElementRef","HostBinding","IconService","iconRegistry","_iconNameToSvgElementMap","_iconNameToFileNameMap","_stateToIconNameMap","v","k","addSvgIcon","bypassSecurityTrustResourceUrl","getNamedSvgIcon","getIconSvgElement","iconStrName","svg","SVGElement","getIconNameFromState","state","getIconSvgElementFromState","getIconNameFromUciState","getIconSvgElementFromUciState","getStateClass","getUciStateClass","MatIconRegistry","StateIconComponent","iconService","UciStateIconComponent","AgsHmiLibraryModule","FormsModule","ReactiveFormsModule","FlexLayoutModule","CommonModule","OwlDateTimeModule","OwlNativeDateTimeModule","declarations","entryComponents","AlertService","_wss","closed","WebSocketSubject","_wssConfig","unsubscribe","closeObserver","openObserver","getMessages","wss","retry","sendMessage","CalService","getTask","uciTaskId","addTaskToPlan","planId","rejectTask","sendTaskingRequest","eventId","DraftPlanService","draftPlan","PlanMinTaskData","assetEntityId","assetName","capability","missionTaskId","targetEntityId","targetName","startTime","endTime","_.isNil","isPlanned","missionUuid","planStatus","PlanService","getMinTaskDataByPlanId","createMinTaskDataByPlanId","plan","updatePlanMinTaskData","deletePlanMinTaskData","bodyData","request","loadByMissionId","plans","planAssetsByPlanId","planAssets","missionTaskDisplay","missionTasks","addMissionTaskToPlan","param","removeMissionTasksFromPlan","copyPlan","getByPlanId","updatePlanAssets","getOptimizationObjectives","getOptimizationMetrics","deletePlan","updatePlan","getRequestWindows","accessWindows","getDisplayWindows","displayWindows","getTaskConstraints","planMissionTaskConstaintsGroups","updateTaskConstraints","constraints","updateOptimizationObjectives","optimizationObjective","ProgressService","pendingRequests","containerName","element","getElement","setBusy","isBusy","setVisible","isVisible","TaskOrderService","createTask","task","loadAll","taskingOrders","loadById","deleteTaskingOrder","updateTaskingOrder","taskingOrderUuid","TimeService","HeaderService","titleService","_headerPrimaryTitle","_headerSubTitle","headerTitle","BehaviorSubject","breadcrumb","setTitle","updateHeaderTitle","updateBreadcrumb","primaryTitle","subtitle","Title","PlanCollectionService","planCollections","loadAllTypes","planTypes","getAssetGroupType","missionType","hmiName","assetGroup1","missionId","create","planCollection","update","missionUUId","CzmlService","getGroundTrackAndSensorVolume","targetId","endpoint","handleError","operation","SchedulerService","getSolverTypes","ExternalScheduleService","runInternalScheduler","publishToLaso","spsEvent","getLasoProhibit","prohibitId","getAssetsWithMx","AccessWindowLimit","Alert","MissionData","MissionTarget","MissionTask","OptimizationMetric","OptimizationObjective","PlanAsset","Task","TaskSubType","Optimization","TaskConstraint","AccessWindow","TimeWindow","PlanCollection","PlanCollectionType","DisplayWindow","SpsEvent","AuthGuard","canActivate","isLoggedIn","red","white","blue","JwtInterceptor","clone","handle","ErrorInterceptor","catchError","statusText","throwError","CacheInterceptor","req","HttpResponse","MockBackendInterceptor","sleep","millisecs","initiation","mergeMap","endsWith","dataObj","urlParts","reqBody","MockBackendProvider","HTTP_INTERCEPTORS","multi","CustomValidators","dateRangeValidator","startDateControlString","endDateControlString","startDateControl","endDateControl","isAfter","dateRange","dateLessThanValidator","compareControlString","control","parent","compareDateControl","dateLessThan","dateGreaterThanValidator","isBefore","dateGreaterThan","maxNumLinesValidator","maxLines","numLines","maxNumLines","lt","ltParam","timeUpdate","assetStatus","taskStatus","sps","sps_prohibit","es_prohibit","executing"],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\r\n*  The Boeing Company\r\n*\r\n*  Copyright (c) 2017 The Boeing Company  All rights reserved.\r\n*----------------------------------------------------------------------------*/\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatBottomSheetModule,\r\n  // MatDatepickerModule,\r\n  MatDialogModule,\r\n  MatExpansionModule,\r\n  MatFormFieldModule,\r\n  // MatGridListModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  // MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  // MatSliderModule,\r\n  // MatSlideToggleModule,\r\n  // MatSnackBarModule,\r\n  // MatSortModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatTooltipModule,\r\n  // MatStepperModule,\r\n} from '@angular/material';\r\n// import {MatNativeDateModule, MatRippleModule} from '@angular/material';\r\n// import {CdkTableModule} from '@angular/cdk/table';\r\n// import {CdkAccordionModule} from '@angular/cdk/accordion';\r\n// import {A11yModule} from '@angular/cdk/a11y';\r\n// import {BidiModule} from '@angular/cdk/bidi';\r\n// import {OverlayModule} from '@angular/cdk/overlay';\r\n// import {PlatformModule} from '@angular/cdk/platform';\r\n// import {ObserversModule} from '@angular/cdk/observers';\r\n// import {PortalModule} from '@angular/cdk/portal';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatTableModule,\r\n    MatBottomSheetModule,\r\n    // MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    // MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    // MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    // MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    // MatSlideToggleModule,\r\n    // MatSliderModule,\r\n    // MatSnackBarModule,\r\n    // MatSortModule,\r\n    // MatStepperModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    // MatNativeDateModule,\r\n    // CdkTableModule,\r\n    // A11yModule,\r\n    // BidiModule,\r\n    // CdkAccordionModule,\r\n    // ObserversModule,\r\n    // OverlayModule,\r\n    // PlatformModule,\r\n    // PortalModule,\r\n  ],\r\n  exports: [\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatTableModule,\r\n    // MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    // MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    // MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    // MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    // MatSlideToggleModule,\r\n    // MatSliderModule,\r\n    // MatSnackBarModule,\r\n    // MatSortModule,\r\n    // MatStepperModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    // MatNativeDateModule,\r\n    // CdkTableModule,\r\n    // A11yModule,\r\n    // BidiModule,\r\n    // CdkAccordionModule,\r\n    // ObserversModule,\r\n    // OverlayModule,\r\n    // PlatformModule,\r\n    // PortalModule,\r\n  ]\r\n})\r\nexport class MaterialModule {}\r\n","/*-----------------------------------------------------------------------------\r\n*  The Boeing Company\r\n*\r\n*  Copyright (c) 2017 The Boeing Company  All rights reserved.\r\n*----------------------------------------------------------------------------*/\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport moment from 'moment-es6';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n/*\r\nThis pipe will format a date and convert it to UTC unless 'forceUtc' parameter\r\nis set to false. If the date is empty, null, or invalid it will return 'defaultVal'\r\n*/\r\n@Pipe({\r\n  name: 'agsDateFormat'\r\n})\r\nexport class DateFormatPipe implements PipeTransform {\r\n\r\n  static format: string = 'YYYY-MM-DD HH:mm:ss';\r\n\r\n  transform(theDate: moment.Moment | Date | string, defaultVal: string = 'n/a', forceUtc: boolean = true): string {\r\n    if (!moment(theDate).isValid()) {\r\n      return defaultVal;\r\n    }\r\n\r\n    if (forceUtc) {\r\n      return moment.utc(theDate).format(DateFormatPipe.format).toUpperCase();\r\n    } else {\r\n      return moment(theDate).format(DateFormatPipe.format + ' ZZ').toUpperCase();\r\n    }\r\n  }\r\n}\r\n\r\n@Pipe({\r\n  name: 'trunc'\r\n})\r\nexport class TruncatePipe implements PipeTransform {\r\n  transform(s: string): string {\r\n    if (!s) {\r\n      return '';\r\n    }\r\n    if (s.length < 100) {\r\n      return s;\r\n    }\r\n    return s.slice(0, 99) + '...';\r\n  }\r\n}\r\n\r\n@Pipe({\r\n  name: 'orderBy'\r\n})\r\nexport class OrderByPipe implements PipeTransform {\r\n\r\n  transform(array, asc = true) {\r\n\r\n    if (asc) { // ascending\r\n      return Array.from(array).sort((item1: string, item2: string) => {\r\n        return this.orderByComparator(item1, item2);\r\n      });\r\n    } else { // descending\r\n      return Array.from(array).sort((item1: string, item2: string) => {\r\n        return this.orderByComparator(item2, item1);\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  orderByComparator(a: string, b: string): number {\r\n    if (a.toLowerCase() < b.toLowerCase()) {\r\n      return -1;\r\n    } else if (a.toLowerCase() > b.toLowerCase()) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n}\r\n\r\n// NOTE:  Adds class \"search-highlight\" to span containing search term.\r\n@Pipe({\r\n   name: 'highlight'\r\n})\r\nexport class HighlightPipe implements PipeTransform {\r\n  constructor(public sanitizer: DomSanitizer) {}\r\n\r\n  transform(text: string, searchTerms): SafeHtml {\r\n    if (searchTerms && text) {\r\n      let s = searchTerms;\r\n\r\n      if (Array.isArray(searchTerms)) {\r\n        if (searchTerms.length === 0) {\r\n          return text;\r\n        }\r\n        s = searchTerms.join(' ');\r\n      }\r\n      \r\n      let pattern = s.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n      pattern = pattern.split(' ').filter((t) => {\r\n          return t.length > 0;\r\n      }).join('|');\r\n      const regex = new RegExp(pattern, 'gi');\r\n\r\n      text = text.replace(/ /g, '&nbsp');\r\n      return this.sanitizer.bypassSecurityTrustHtml(\r\n          text.replace(regex, (match) => `<span class=\"search-highlight\">${match}</span>`)\r\n      );\r\n    } \r\n    else {\r\n      return text;\r\n    }\r\n  }\r\n}\r\n\r\n// Removes an item from a list (array) of items.  Mostly used to remove a string\r\n// from a list, it will also work to remove an object from a list of objects\r\n// as long as there is a 'name' property on the object\r\n@Pipe({\r\n  name: 'remove'\r\n})\r\nexport class RemoveItemPipe implements PipeTransform {\r\n\r\n  // Returns an array of items\r\n  transform(items: any[], itemToRemove: any): any[] {\r\n    if (!Array.isArray(items)) {\r\n      return items;\r\n    }\r\n\r\n    if (Array.isArray(items) && items.length === 0) {\r\n      return items;\r\n    }\r\n\r\n    if (typeof items[0] === 'string') {\r\n      return items.filter(item => \r\n        item.localeCompare(itemToRemove) !== 0\r\n      );\r\n    }\r\n    else if (items[0].hasOwnProperty('name') && itemToRemove.hasOwnProperty('name')) {\r\n      return items.filter(item => \r\n        item.name.localeCompare(itemToRemove.name) !== 0\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport const CustomPipes = {\r\n  DateFormatPipe,\r\n  TruncatePipe,\r\n  OrderByPipe,\r\n  RemoveItemPipe\r\n};\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import * as _ from 'lodash';\r\nimport { Expose, classToPlain } from 'class-transformer';\r\nexport class Annotation {\r\n    userLogon: string = '';\r\n    lastUpdated: string = '';\r\n    @Expose({name: 'annotationId'})\r\n    id: string = '';\r\n    objectId: string = '';\r\n    annotationType: string = '';\r\n    noteType: string = '';\r\n    narrative: string = '';\r\n    confidence:\tnumber = 0;\r\n\r\n\r\n  constructor(json?: any) {\r\n    if (json) {\r\n      this.userLogon = json.userLogon;\r\n      this.lastUpdated = json.lastUpdated;\r\n      this.id = json.annotationId;\r\n      this.objectId = json.objectId;\r\n      this.annotationType = json.annotationType;\r\n      this.noteType = json.noteType;\r\n      this.narrative = json.narrative;\r\n      this.confidence = json.confidence;\r\n    }\r\n  }\r\n\r\n  serialize() {\r\n    return classToPlain(this);\r\n  }\r\n}\r\n","/*-----------------------------------------------------------------------------\r\n*  The Boeing Company\r\n*\r\n*  Copyright (c) 2017 The Boeing Company  All rights reserved.\r\n*----------------------------------------------------------------------------*/\r\n\r\nimport { Injectable, isDevMode } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LogService {\r\n\r\n  isLocalhost: boolean = false;\r\n  isDevMode: boolean = false;\r\n\r\n  constructor() {\r\n    this.isLocalhost = window.location.hostname.toLocaleLowerCase() === 'localhost';\r\n    this.isDevMode = isDevMode();\r\n  }\r\n\r\n  // displays in the console. will not display in a production build\r\n  debug(...msg: any[]): void {\r\n    if (!this.isDevMode) {\r\n      return;\r\n    }\r\n    console.log(...msg);\r\n  }\r\n\r\n  // only display if running on localhost\r\n  local(...msg: any[]): void {\r\n    if (!this.isLocalhost) {\r\n      return;\r\n    }\r\n    console.log(...msg);\r\n  }\r\n\r\n  info(...msg: any[]): void {\r\n    console.log(...msg);\r\n  }\r\n\r\n  warn(...msg: any[]): void {\r\n    console.warn(...msg);\r\n  }\r\n\r\n  error(...msg: any[]): void {\r\n    console.error(...msg);\r\n  }\r\n\r\n  highlight(background: string, msg: string): void {\r\n    console.log(`%c ${msg} `, `background: ${background}; color: #000; font-weight: bold;`);\r\n  }\r\n}\r\n","/*-----------------------------------------------------------------------------\r\n*  The Boeing Company\r\n*\r\n*  Copyright (c) 2017 The Boeing Company  All rights reserved.\r\n*----------------------------------------------------------------------------*/\r\n\r\nexport class Util {\r\n\r\n  /****************************************************************************\r\n   * Generate Guid\r\n   ****************************************************************************/\r\n  static newGuid() {\r\n    let d = new Date().getTime();\r\n    let uuid = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n      let r = (d + Math.random() * 16) % 16 | 0;\r\n      d = Math.floor(d / 16);\r\n      return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16).toUpperCase();\r\n    });\r\n    return uuid;\r\n  }\r\n\r\n  /****************************************************************************\r\n   * Takes a variable list of strings and combines them into a valid url. This\r\n   * function will avoid the problem of missing or extra '/' characters.\r\n   * Example:\r\n   *    input: 'http://www.google.com/', '/string1/', /string2', 'string3'\r\n   *    output: 'http://www.google.com/string1/string2/string3'\r\n   ****************************************************************************/\r\n  static urlJoin(...strArray: string[]) {\r\n    let resultArray = [];\r\n\r\n    // If the first part is a plain protocol, we combine it with the next part.\r\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\r\n      let first = strArray.shift();\r\n      strArray[0] = first + strArray[0];\r\n    }\r\n\r\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\r\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\r\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\r\n    } else {\r\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\r\n    }\r\n\r\n    for (let i = 0; i < strArray.length; i++) {\r\n      let component = strArray[i];\r\n\r\n      if (typeof component !== 'string') {\r\n        throw new TypeError('Url must be a string. Received ' + component);\r\n      }\r\n\r\n      if (component === '') { continue; }\r\n\r\n      if (i > 0) {\r\n        // Removing the starting slashes for each component but the first.\r\n        component = component.replace(/^[\\/]+/, '');\r\n      }\r\n      if (i < strArray.length - 1) {\r\n        // Removing the ending slashes for each component but the last.\r\n        component = component.replace(/[\\/]+$/, '');\r\n      } else {\r\n        // For the last component we will combine multiple slashes to a single one.\r\n        component = component.replace(/[\\/]+$/, '/');\r\n      }\r\n\r\n      resultArray.push(component);\r\n\r\n    }\r\n\r\n    let str = resultArray.join('/');\r\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\r\n\r\n    // remove trailing slash before parameters or hash\r\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\r\n\r\n    // replace ? in parameters with &\r\n    let parts = str.split('?');\r\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\r\n\r\n    return str;\r\n  }\r\n\r\n  /****************************************************************************\r\n   * This function can be used to override the console.log function to turn off\r\n   * all messages for production, or intercept the console.log function to do\r\n   * some additional processing.\r\n   ****************************************************************************/\r\n  static overrideConsole() {\r\n    let console = window.console;\r\n    if (!console) { return; }\r\n    function intercept(method) {\r\n      let original = console[method];\r\n      console[method] = function () {\r\n        // do sneaky stuff\r\n        if (original.apply) {\r\n          // Do this for normal browsers\r\n          original.apply(console, arguments);\r\n        } else {\r\n          // Do this for IE\r\n          let message = Array.prototype.slice.apply(arguments).join(' ');\r\n          original(message);\r\n        }\r\n      };\r\n    }\r\n    let methods = ['log', 'warn', 'error'];\r\n    for (let i = 0; i < methods.length; i++) {\r\n      intercept(methods[i]);\r\n    }\r\n  }\r\n\r\n  /****************************************************************************\r\n   * Get the best contrasting color, either black or white, for given input color.\r\n   * Parameters:\r\n   *    color: hex color such as '#FF0077'\r\n   ****************************************************************************/\r\n  contrastColor(hexColor) {\r\n    // Counting the perceptive luminance\r\n    // human eye favors green color...\r\n    let rgb = this.hexToRgb(hexColor);\r\n    let a = 1 - (0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b) / 255;\r\n    if (a < 0.5) {\r\n      return '#000000';\r\n    } else {\r\n      return '#ffffff';\r\n    }\r\n  }\r\n\r\n  colorFromRgb(r, g, b) {\r\n    return 'rgb(' + r + ',' + g + ',' + b + ')';\r\n  }\r\n\r\n  componentToHex(c) {\r\n    let hex = c.toString(16);\r\n    return hex.length === 1 ? '0' + hex : hex;\r\n  }\r\n\r\n  rgbToHex(r, g, b) {\r\n    return '#' + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);\r\n  }\r\n\r\n  hexToRgb(hex) {\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    let shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n      return r + r + g + g + b + b;\r\n    });\r\n\r\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n      r: parseInt(result[1], 16),\r\n      g: parseInt(result[2], 16),\r\n      b: parseInt(result[3], 16)\r\n    } : null;\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { throwError as observableThrowError, Observable, of, forkJoin } from 'rxjs';\r\nimport { LogService } from './log.service';\r\nimport { Util } from '../other/util';\r\nimport { Annotation } from '../models/annotation';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AnnotationService {\r\n\r\n  serviceUrl: string = '';\r\n\r\n  constructor(private http: HttpClient, private logService: LogService) { }\r\n\r\n  init(serviceUrl: string) {\r\n    this.serviceUrl = serviceUrl;\r\n  }\r\n\r\n  /**************************************************************************\r\n   * GET /annotation/{objectId}\r\n   * get a list of Annotations\r\n   **************************************************************************/\r\n  getAnnotations(id: string): Observable<Annotation[]> {\r\n    this.logService.debug('AnnotationService.getAnnotations()');\r\n    const url = Util.urlJoin(this.serviceUrl, `/annotation/${id}`);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived annotation list`, res)),\r\n      map(res => res.map(item => new Annotation(item)))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * POST /annotation\r\n   * create a new event\r\n   **************************************************************************/\r\n  createAnnotation(annotation: Annotation): Observable<any> {\r\n    this.logService.debug('AnnotationService.createAnnotation()');\r\n    const url = Util.urlJoin(this.serviceUrl, '/annotation');\r\n    this.logService.debug(`    POST ${url}`, annotation);\r\n    return this.http.post<any>(url, annotation.serialize(), httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    created annotation`, res)),\r\n      // map(res => new Annotation(res))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * PUT /annotation\r\n   * update event\r\n   **************************************************************************/\r\n  updateAnnotation(annotation: Annotation): Observable<Annotation> {\r\n    this.logService.debug('AnnotationService.updateAnnotation()');\r\n    const url = Util.urlJoin(this.serviceUrl, '/annotation');\r\n    this.logService.debug(`    PUT ${url}`, annotation);\r\n    return this.http.put<Annotation>(url, annotation.serialize(), httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    updated annotation`, res)),\r\n      map(res => new Annotation(res))\r\n    );\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, OnChanges } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { Annotation } from '../../models/annotation';\r\nimport { AnnotationService } from '../../services/annotation.service';\r\nimport { LogService } from '../../services/log.service';\r\n\r\n@Component({\r\n  selector: 'ags-lib-annotations',\r\n  templateUrl: './annotation.component.html',\r\n  styleUrls: ['./annotation.component.scss']\r\n})\r\nexport class AnnotationComponent implements OnInit, OnChanges {\r\n\r\n  @Input() objectId: string = '';\r\n  @Input() annotationType: string = ''; // EVENTLINK, EVENTMODEL, EVENT, OBSERVABILITY, PLAN, COA, TASK\r\n\r\n  annotationsFormGroup: FormGroup;\r\n  factAnnotations: Array<Annotation>;\r\n  assumptionAnnotations: Array<Annotation>;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private annotationService: AnnotationService,\r\n    private logService: LogService) {\r\n\r\n    // create the controls\r\n    this.annotationsFormGroup = this.formBuilder.group({\r\n      factsCtrl: [null, { updateOn: 'blur' }],\r\n      assumptionsCtrl: [null, { updateOn: 'blur' }]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    // call function to update the annotations whenever data changes\r\n    this.annotationsFormGroup.valueChanges.subscribe(x => {\r\n      if (this.annotationsFormGroup.dirty && this.annotationsFormGroup.valid) {\r\n        this.updateAnnotations();\r\n        this.annotationsFormGroup.markAsPristine();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.logService.debug('AnnotationsComponent.ngOnChanges()');\r\n    if (this.objectId) {\r\n      // Get annotations for this event and populate the controls. If no annotations exist, create them\r\n      this.annotationService.getAnnotations(this.objectId).subscribe(annotations => {\r\n        this.factAnnotations = annotations.filter(x => x.noteType.toUpperCase() === 'FACT');\r\n        this.assumptionAnnotations = annotations.filter(x => x.noteType.toUpperCase() === 'ASSUMPTION');\r\n\r\n        // Create new fact and assumption annotations if none exist\r\n        if (!this.factAnnotations || this.factAnnotations.length <= 0) {\r\n          let newAnnotation = new Annotation();\r\n          newAnnotation.objectId = this.objectId;\r\n          newAnnotation.annotationType = this.annotationType;\r\n          newAnnotation.noteType = 'Fact';\r\n          newAnnotation.narrative = '';\r\n          this.factAnnotations.push(newAnnotation);\r\n        }\r\n        this.annotationsFormGroup.controls['factsCtrl'].setValue(this.factAnnotations[0].narrative);\r\n\r\n        if (!this.assumptionAnnotations || this.assumptionAnnotations.length <= 0) {\r\n          let newAnnotation = new Annotation();\r\n          newAnnotation.objectId = this.objectId;\r\n          newAnnotation.annotationType = this.annotationType;\r\n          newAnnotation.noteType = 'Assumption';\r\n          newAnnotation.narrative = '';\r\n          this.assumptionAnnotations.push(newAnnotation);\r\n        }\r\n        this.annotationsFormGroup.controls['assumptionsCtrl'].setValue(this.assumptionAnnotations[0].narrative);\r\n      });\r\n    }\r\n    else {\r\n      throw new Error(`AnnotationComponent: required input parameter 'objectId' is undefined`); \r\n    }\r\n  }\r\n\r\n  updateAnnotations() {\r\n    this.logService.debug('AnnotationsComponent::updateAnnotations()');\r\n    \r\n    let factsCtrl = this.annotationsFormGroup.controls['factsCtrl'];\r\n    let assumptionsCtrl = this.annotationsFormGroup.controls['assumptionsCtrl'];\r\n\r\n    if (factsCtrl.dirty) {\r\n      this.factAnnotations[0].narrative = factsCtrl.value;\r\n\r\n      // if the annotationId is empty that indicates that this is a new annotation\r\n      if (!this.factAnnotations[0].id) {\r\n        this.annotationService.createAnnotation(this.factAnnotations[0]).subscribe(res => {\r\n          this.factAnnotations[0] = res;\r\n        });\r\n      } else {\r\n        this.annotationService.updateAnnotation(this.factAnnotations[0]).subscribe(res => {\r\n          this.factAnnotations[0] = res;\r\n        });\r\n      }\r\n    }\r\n\r\n    if (assumptionsCtrl.dirty) {\r\n      this.assumptionAnnotations[0].narrative = assumptionsCtrl.value;\r\n\r\n      if (!this.assumptionAnnotations[0].id) {\r\n        this.annotationService.createAnnotation(this.assumptionAnnotations[0]).subscribe(res => {\r\n          this.assumptionAnnotations[0] = res;\r\n        });\r\n      } else {\r\n        this.annotationService.updateAnnotation(this.assumptionAnnotations[0]).subscribe(res => {\r\n          this.assumptionAnnotations[0] = res;\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ags-lib-page-not-found',\r\n  templateUrl: './page-not-found.component.html',\r\n  styleUrls: ['./page-not-found.component.scss']\r\n})\r\nexport class PageNotFoundComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Component, ViewEncapsulation, AfterViewInit } from '@angular/core';\r\nimport { LogService } from '../../services/log.service';\r\n\r\n@Component({\r\n  selector: 'ags-lib-progress',\r\n  templateUrl: './progress.component.html',\r\n  styleUrls: ['./progress.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\n\r\n  export class ProgressComponent implements AfterViewInit {\r\n\r\n    constructor(\r\n      private logService: LogService\r\n    ) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.hideComponent();\r\n  }\r\n\r\n  hideComponent() {\r\n    let el = document.getElementById('progressContainer');\r\n    if (el) {\r\n      el.style.display = 'none';\r\n      this.logService.debug('set style of \"progressContainer\" to \"none\"');\r\n    }\r\n    else {\r\n      this.logService.debug('unable to find element \"progressContainer\"');\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ags-lib-title',\r\n  templateUrl: './title.component.html',\r\n  styleUrls: ['./title.component.scss']\r\n})\r\n\r\nexport class TitleComponent implements OnInit {\r\n  @Input() title: string;\r\n  @Output() onCancel = new EventEmitter<void>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onClick() {\r\n    this.onCancel.emit();\r\n  }\r\n}\r\n","export class AuthenticationRequest {\r\n    userName: string;\r\n    password: string;\r\n\r\n    constructor(json: any) {\r\n        this.userName = json.userName;\r\n        this.password = json.password;\r\n    }\r\n}\r\n\r\nexport class AuthenticationResponse {\r\n    authenticated: boolean;\r\n    displayName: string;\r\n    reason:\tstring;\r\n    token: string;\r\n\r\n    constructor(json: any) {\r\n        this.authenticated = json.authenticated;\r\n        this.displayName = json.displayName;\r\n        this.reason = json.reason;\r\n        this.token = json.token;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { LogService } from './log.service';\r\nimport { Util } from '../other/util';\r\nimport { AuthenticationRequest, AuthenticationResponse } from '../models/authentication';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private serviceUrl: string = '';\r\n  private loginRoute: string = '';\r\n  private AUTHENICATE = '/authenticate';\r\n  private GET_DOMAINS = '/domain';\r\n  private HTTP_OPTIONS = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'accept': 'application/json',\r\n    })\r\n  };\r\n\r\n  private USERINFO_KEY: string = 'userInfo';\r\n\r\n  private isCurrentlyLoggedIn = false;\r\n  private username: string = '';\r\n\r\n  constructor(private http: HttpClient,\r\n    private router: Router,\r\n    private logService: LogService) {\r\n  }\r\n\r\n  init(serviceUrl: string, loginRoute = '/login') {\r\n    this.serviceUrl = serviceUrl;\r\n    this.loginRoute = loginRoute;\r\n    this.username = this.getUsernameFromStorage();\r\n    this.isCurrentlyLoggedIn = ((this.username != null) && (this.username.length > 0));\r\n  }\r\n\r\n  redirectToLoginPage() {\r\n    this.router.navigateByUrl(this.loginRoute);\r\n  }\r\n\r\n  getAuthenticationServicePrefix() {\r\n    return this.serviceUrl;\r\n  }\r\n\r\n  getUsernameFromStorage(): string {\r\n    let username: string = '';\r\n    let userInfo = this.getUserInfoFromStorage();\r\n\r\n    if (userInfo && userInfo.hasOwnProperty('userName') &&\r\n      (userInfo.userName.length > 0)) {\r\n      username = userInfo.userName;\r\n    }\r\n\r\n    return username;\r\n  }\r\n\r\n  getDisplayNameFromStorage(): string {\r\n    let displayName: string = '';\r\n    let userInfo = this.getUserInfoFromStorage();\r\n\r\n    if (userInfo && userInfo.hasOwnProperty('displayName') &&\r\n      (userInfo.displayName.length > 0)) {\r\n      displayName = userInfo.displayName;\r\n    }\r\n\r\n    return displayName;\r\n  }\r\n\r\n  getTokenFromStorage(): string {\r\n    let token: string = '';\r\n    let userInfo = this.getUserInfoFromStorage();\r\n\r\n    if (userInfo && userInfo.hasOwnProperty('token') &&\r\n      (userInfo.token.length > 0)) {\r\n      token = userInfo.token;\r\n    }\r\n\r\n    return token;\r\n  }\r\n\r\n  getUserInfoFromStorage(): any {\r\n    let userInfo: any;\r\n    userInfo = sessionStorage.getItem(this.USERINFO_KEY);\r\n\r\n    return JSON.parse(userInfo);\r\n  }\r\n\r\n  putUserInfoInStorage(userInfo: any): void {\r\n    sessionStorage.setItem(this.USERINFO_KEY, userInfo);\r\n  }\r\n\r\n  get isLoggedIn() {\r\n    return this.isCurrentlyLoggedIn;\r\n  }\r\n\r\n  get currentUser() {\r\n    return this.getUsernameFromStorage();\r\n  }\r\n\r\n  get displayName() {\r\n    return this.getDisplayNameFromStorage();\r\n  }\r\n\r\n  get token() {\r\n    return this.getTokenFromStorage();\r\n  }\r\n\r\n\r\n  getAllDomains(): Observable<string[]> {\r\n    const url = Util.urlJoin(this.serviceUrl, this.GET_DOMAINS);\r\n    this.logService.debug('AuthenticationService.getAllDomains() - url = ' + url);\r\n\r\n    return this.http.get<any>(url, this.HTTP_OPTIONS).pipe(\r\n      tap(x => this.logService.debug(`retreived domain list`)),\r\n      map(res => res.strings as string[]),\r\n    );\r\n  }\r\n\r\n  logIn(userInfo, domain: string): Observable<AuthenticationResponse> {\r\n    const url = Util.urlJoin(this.serviceUrl, this.AUTHENICATE, domain);\r\n    let authenticationRequest = new AuthenticationRequest(userInfo);\r\n\r\n    return this.http.post<AuthenticationResponse>(url, authenticationRequest, this.HTTP_OPTIONS)\r\n      .pipe(\r\n        tap(\r\n          response => {\r\n            this.logService.debug('got authentication response ' + JSON.stringify(response));\r\n            let authenticationResponse = new Â AuthenticationResponse(response);\r\n            if (authenticationResponse.authenticated) {\r\n              this.putUserInfoInStorage(JSON.stringify({\r\n                userName: userInfo.userName,\r\n                displayName: authenticationResponse.displayName,\r\n                token: authenticationResponse.token,\r\n              }));\r\n              this.isCurrentlyLoggedIn = true;\r\n            }\r\n          },\r\n          error => {\r\n            this.logService.warn('Error authenticating.  [' + error + ']');\r\n          }),\r\n    );\r\n  }\r\n\r\n  logOut() {\r\n    localStorage.removeItem(this.USERINFO_KEY);\r\n    this.username = '';\r\n    this.isCurrentlyLoggedIn = false;\r\n    sessionStorage.clear();\r\n    this.redirectToLoginPage();\r\n  }\r\n}\r\n","import {AfterContentInit, Component,  OnInit,  Input,  ViewChild,  ElementRef} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { LogService } from '../../services/log.service';\r\nimport { AuthenticationResponse } from '../../models/authentication';\r\nimport { AuthenticationService } from '../../services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'ags-lib-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\n\r\nexport class LoginComponent implements OnInit, AfterContentInit  {\r\n\r\n  @Input() appName: string = '';\r\n  @ViewChild('username') username: ElementRef;\r\n  \r\n  private returnUrl: string = '';\r\n\r\n  public ERROR_MESSAGES: { [key: string]: string } = {\r\n    loginMessage: 'Unable to Sign In, try again.',\r\n  };\r\n  public domainList: string[] = new Array<string>();\r\n  public selectedDomain = 'cos';\r\n\r\n  public loginForm: FormGroup;\r\n  public loginFailed: boolean = false;\r\n  public submitted: boolean = false;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private logService: LogService,\r\n    private authenticationService: AuthenticationService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.appName = this.route.snapshot.data['appName'];\r\n    this.route.queryParams.subscribe(\r\n      params => {\r\n        this.returnUrl = params['return'] || '/';\r\n    });\r\n\r\n    let component = this;\r\n    this.authenticationService.getAllDomains()\r\n    .subscribe((response: any) => {\r\n      for (let i = 0; i < response.length; i++) {\r\n        component.domainList.push(response[i]);\r\n      }\r\n      component.selectedDomain = component.domainList[0];\r\n    });\r\n\r\n    this.createForm();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // Set the focus to the username (mwt)\r\n    this.username.nativeElement.focus();\r\n  }\r\n\r\n  createForm() {\r\n    this.loginForm = this.formBuilder.group({\r\n      username: ['', [\r\n        // Validators.required,\r\n        // Validators.minLength(1),\r\n        // Validators.maxLength(50)\r\n      ]],\r\n      password: ['', [\r\n        // Validators.required,\r\n        // Validators.minLength(3),\r\n        // Validators.maxLength(50)\r\n      ]],\r\n      domain: [{value: this.selectedDomain, disabled: false}, [\r\n        Validators.required,\r\n      ]],\r\n    });\r\n  }\r\n\r\n  logIn() {\r\n    this.submitted = true;\r\n\r\n    let username = this.loginForm.controls.username.value;\r\n    let password = this.loginForm.controls.password.value;\r\n\r\n    this.authenticationService.logIn({\r\n      userName: username,\r\n      password: password}, this.selectedDomain)\r\n      .subscribe(\r\n        res => {\r\n          let authenticationResponse = newÂ AuthenticationResponse(res);\r\n          if (!authenticationResponse.authenticated) {\r\n            this.loginFailed = true;\r\n          } else {\r\n            this.router.navigateByUrl(this.returnUrl);\r\n          }\r\n        },\r\n        err => {\r\n          this.logService.debug('Error occured while authenticating.  ' + JSON.stringify(err));\r\n          this.loginFailed = true;\r\n        }\r\n      );\r\n  }\r\n\r\n  handleOnFocus() {\r\n    if (this.submitted) {\r\n      this.submitted = false;\r\n      this.loginFailed = false;\r\n      this.loginForm.markAsPristine();\r\n      this.loginForm.markAsUntouched();\r\n    }\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ags-lib-empty',\r\n  template: ''\r\n})\r\nexport class EmptyComponent {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","import { AccessWindowLimit } from './access-window-limit';\r\n\r\nexport class Capability {\r\n    capabilityId: string;\r\n    description: string;\r\n    confidence: string;\r\n    capabilityMapId: string;\r\n    preExecutionTime: number;\r\n    postExecutionTime: number;\r\n    reliabilityProbability: number;\r\n    probabilityOfSuccess: number;\r\n    isDedicated: boolean;\r\n    assessTime: number;\r\n    priority: number;\r\n    executionTime: number;\r\n\r\n    elevationMinLimit: number;\r\n    elevationMaxLimit: number;\r\n    earthLimbAltLimit: number;\r\n    qualityScore: number;\r\n    lunarExclusionAngle: number;\r\n    applyLightingConstraints: boolean;\r\n    solarExclusionAngle: number;\r\n    applySolarDarknessConstraint: boolean;\r\n    rangeMin: number;\r\n    rangeMax: number;\r\n    azimuthMinLimit: number;\r\n    azimuthMaxLimit: number;\r\n\r\n    constructor(json?: any) {\r\n        this.capabilityId = json.capabilityId;\r\n        this.description = json.description;\r\n        this.confidence = json.confidence;\r\n        this.capabilityMapId = json.capabilityMapId;\r\n        this.preExecutionTime = json.preExecutionTime;\r\n        this.postExecutionTime = json.postExecutionTime;\r\n        this.reliabilityProbability = json.reliabilityProbability;\r\n        this.probabilityOfSuccess = json.probabilityOfSuccess;\r\n        this.isDedicated = json.isDedicated;\r\n        this.assessTime = json.assessTime;\r\n        this.priority = json.priority;\r\n        this.executionTime = json.executionTime;\r\n\r\n        this.elevationMinLimit = json.elevationMinLimit;\r\n        this.elevationMaxLimit = json.elevationMaxLimit;\r\n        this.earthLimbAltLimit = json.earthLimbAltLimit;\r\n        this.qualityScore = json.qualityScore;\r\n        this.lunarExclusionAngle = json.lunarExclusionAngle;\r\n        this.applyLightingConstraints = json.applyLightingConstraints;\r\n        this.solarExclusionAngle = json.solarExclusionAngle;\r\n        this.applySolarDarknessConstraint = json.applySolarDarknessConstraint;\r\n        this.rangeMin = json.rangeMin;\r\n        this.rangeMax = json.rangeMax;\r\n        this.azimuthMinLimit = json.azimuthMinLimit;\r\n        this.azimuthMaxLimit = json.azimuthMaxLimit;\r\n    }\r\n}\r\n\r\nexport class CapabilityMap {\r\n    capabilityMapId: string = '';\r\n    capabilityType: string = '';\r\n    uciCapabilityTypeName: string = '';\r\n    uciTaskTypeName: string = '';\r\n    description: string = '';\r\n    hasTarget: boolean = false;\r\n\r\n    constructor(json?: any) {\r\n        this.capabilityMapId = json.capabilityMapId ? json.capabilityMapId : '';\r\n        this.capabilityType = json.capabilityType ? json.capabilityType : '';\r\n        this.uciCapabilityTypeName = json.uciCapabilityTypeName ? json.uciCapabilityTypeName : '';\r\n        this.uciTaskTypeName = json.uciTaskTypeName ? json.uciTaskTypeName : '';\r\n        this.description = json.description ? json.description : '';\r\n        this.hasTarget = json.hasTarget ? json.hasTarget : '' ;\r\n    }\r\n}\r\n\r\nexport class Observability {\r\n    observingCapabilityMapId: string;\r\n    observingCapabilityType: string;\r\n    usedCapabilityMapId: string;\r\n    usedCapabilityType: string;\r\n    description: string;\r\n    capabilityDomain: string;\r\n\r\n    constructor(json?: any) {\r\n        if (json != null) {\r\n            this.observingCapabilityMapId = json.observingCapabilityMapId;\r\n            this.observingCapabilityType = json.observingCapabilityType;\r\n            this.usedCapabilityMapId = json.usedCapabilityMapId;\r\n            this.usedCapabilityType = json.usedCapabilityType;\r\n            this.description = json.description;\r\n            this.capabilityDomain = json.capabilityDomain;\r\n        }\r\n    }\r\n}\r\n","export class Vulnerability {\r\n\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    confidence: number;\r\n\r\n    constructor(json?: any) {\r\n        if (json) {\r\n            this.fromJson(json);\r\n        }\r\n    }\r\n\r\n    fromJson(json: any) {\r\n        this.id = json.vulnerabilityId;\r\n        this.name = json.vulnerabilityName;\r\n        this.description =  json.description;\r\n        this.confidence = json.confidence;\r\n    }\r\n}\r\n","export class Domain {\r\n    domainType: string = '';\r\n    agsEntityId: string = '';\r\n    sccNum: string = '';\r\n    orbitType: string = '';\r\n    constellation: string = '';\r\n    intlDesignator: string = '';\r\n    launchSite: string = '';\r\n    launchDate: string = '';\r\n    decayDate: string = '';\r\n    tles: any[];\r\n    waypoints: any[];\r\n\r\n    constructor(json?: any) {\r\n        if (json) {\r\n            this.domainType = json.domainType;\r\n            this.agsEntityId = json.agsEntityId;\r\n            this.sccNum = json.sccNum;\r\n            this.orbitType = json.orbitType;\r\n            this.constellation = json.constellation;\r\n            this.intlDesignator = json.intlDesignator;\r\n            this.launchSite = json.launchSite;\r\n            this.launchDate = json.launchDate;\r\n            this.decayDate = json.decayDate;\r\n            this.tles = json.tles;\r\n            this.waypoints = json.waypoints;\r\n        }\r\n        else {\r\n            this.domainType = 'SPACE';\r\n        }\r\n    }\r\n}\r\n","import { Capability } from './capability';\r\nimport { Vulnerability } from './vulnerability';\r\nimport { Domain } from './domain';\r\n\r\n/* tslint:disable:no-use-before-declare */\r\nexport class Country {\r\n    code: string;\r\n    name: string;\r\n\r\n    constructor(json?: string[]) {\r\n        if (json) {\r\n            this.fromJson(json);\r\n        }\r\n    }\r\n\r\n    fromJson(json: string[]) {\r\n        this.code = json[0];\r\n        this.name = json[1];\r\n    }\r\n\r\n    toString(): string {\r\n        return JSON.stringify(this);\r\n    }\r\n}\r\n\r\nexport class Entity {\r\n    entityType: string = '';\r\n    name: string = '';\r\n    description: string = '';\r\n    owner: string = '';\r\n    sic: string = '';\r\n    countryCodeAlpha5: string = '';\r\n    affiliation: string = '';\r\n    rgb: string = '';\r\n    colorName: string = '';\r\n    parentId: string = '';\r\n\r\n    childrenIds: string[] = [];\r\n    groupIds: string[] = [];\r\n    capabilities: Capability[] = [];\r\n    vulnerabilities: Vulnerability[];\r\n\r\n    domain:\tDomain;\r\n    agsEntityId: string;\r\n\r\n    constructor(json: any) {\r\n        this.entityType = json.entityType;\r\n        this.name = json.name;\r\n        this.description = json.description;\r\n        this.owner = json.owner;\r\n        this.sic = json.sic;\r\n        this.countryCodeAlpha5 = json.countryCodeAlpha5;\r\n        this.affiliation = json.affiliation;\r\n        this.rgb = json.rgb;\r\n        this.colorName = json.colorName;\r\n        this.parentId = json.parentId;\r\n\r\n        this.childrenIds = json.childrenIds ? json.childrenIds : [];\r\n        this.groupIds = json.groupIds ? json.groupIds : [];\r\n        this.capabilities = json.capabilities ? json.capabilities.map(x => new Capability(x)) : [];\r\n        this.vulnerabilities = json.vulnerabilities ? json.vulnerabilities.map(x => new Vulnerability(x)) : [];\r\n\r\n        this.domain = json.domain ? new Domain(json.domain) : new Domain();\r\n        this.agsEntityId = json.agsEntityId;\r\n    }\r\n}\r\n\r\nexport class PartialEntity {\r\n    entityId: string = '';\r\n    name: string = '';\r\n    countryName: string = '';\r\n    domainType: string = '';\r\n    owner: string = '';\r\n    scc: string = '';\r\n    affiliation: string = '';\r\n    groups: Group[];\r\n    capabilityTypes: string[];\r\n\r\n    constructor(json: any) {\r\n        this.entityId = json.agsEntityId ? json.agsEntityId : '';\r\n        this.name = json.name ? json.name : '';\r\n        this.countryName = json.country ? json.country : '';\r\n        this.domainType = json.domainType ? json.domainType : '';\r\n        this.owner = json.owner ? json.owner : '';\r\n        this.scc = json.sccNum ? json.sccNum.toString() : '';\r\n        this.affiliation = json.affiliation ? json.affiliation : '';\r\n        this.groups = json.groups ? json.groups.map(x => new Group(x)) : [];\r\n        this.capabilityTypes = json.capabilityTypes ? json.capabilityTypes : [];\r\n    }\r\n}\r\n\r\nexport class Group {\r\n    groupName: string = '';\r\n    entityCount: number;\r\n    groupId: string = '';\r\n\r\n    //NEW MODEL DEFINITION\r\n    name: string;\r\n    id: string;\r\n\r\n    constructor(json?: any) {\r\n        this.groupName = json.groupName ? json.groupName : json.name;\r\n        this.entityCount = json.entityCount;\r\n        this.groupId = json.groupId ? json.groupId : json.id;\r\n        this.name = json.name ? json.name : json.groupName;\r\n        this.id = json.id ? json.id : json.groupId;\r\n    }\r\n}\r\n\r\n// BaseEntity class is only intended to be used as a helper class for service calls.\r\nexport class BaseEntity {\r\n    agsEntityId: string;\r\n    entityType: string;\r\n    name: string;\r\n    description: string;\r\n    owner: string;\r\n    sic: string;\r\n    domainType: string;\r\n    parentId: string;\r\n\r\n    constructor(entity: Entity) {\r\n        this.agsEntityId = entity.agsEntityId;\r\n        this.entityType = entity.entityType ? entity.entityType : '';\r\n        this.name = entity.name;\r\n        this.description = entity.description ? entity.description : '';\r\n        this.owner = entity.owner ? entity.owner : '';\r\n        this.sic = entity.sic ? entity.sic : '';\r\n        this.domainType = entity.domain.domainType ? entity.domain.domainType : '';\r\n    }\r\n}\r\n","\r\nimport { Injectable } from '@angular/core';\r\nimport {throwError as observableThrowError,  Observable ,  Subject ,  of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\ninterface CacheContent {\r\n  expiry: number;\r\n  value: any;\r\n}\r\n\r\n/**\r\n * Cache Service is an observables based in-memory cache implementation\r\n * Keeps track of in-flight observables and sets a default expiry for cached values\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CacheService {\r\n  private cache: Map<string, CacheContent> = new Map<string, CacheContent>();\r\n  readonly DEFAULT_MAX_AGE: number = 300000;\r\n\r\n  /**\r\n   * Gets the value from cache if the key is provided.\r\n   */\r\n  get(key: string, fallback?: Observable<any>, maxAge?: number): Observable<any> | Subject<any> {\r\n\r\n    if (this.hasValidCachedValue(key)) {\r\n      console.log(`%cGetting from cache ${key}`, 'color: green');\r\n      return of(this.cache.get(key).value);\r\n    }\r\n\r\n    if (!maxAge) {\r\n      maxAge = this.DEFAULT_MAX_AGE;\r\n    }\r\n\r\n    if (fallback && fallback instanceof Observable) {\r\n      console.log(`%c Calling api for ${key}`, 'color: purple');\r\n      return fallback.pipe(tap((value) => { this.set(key, value, maxAge);  /*console.log(`%c added ${key}/${JSON.stringify(value).substr(0, 50)} to cache`, 'color: purple');*/ }));\r\n    } else {\r\n      return observableThrowError('Requested key is not available in Cache');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the value with key in the cache\r\n   * Notifies all observers of the new value\r\n   */\r\n  set(key: string, value: any, maxAge: number = this.DEFAULT_MAX_AGE): void {\r\n    this.cache.set(key, { value: value, expiry: Date.now() + maxAge });\r\n  }\r\n\r\n  /**\r\n   * Checks if the a key exists in cache\r\n   */\r\n  has(key: string): boolean {\r\n    return this.cache.has(key);\r\n  }\r\n\r\n   /**\r\n   * Delete cache entry\r\n   */\r\n  delete(key: string): void {\r\n    this.cache.delete(key);\r\n  }\r\n\r\n  /**\r\n   * Checks if the key exists and has not expired.\r\n   */\r\n  private hasValidCachedValue(key: string): boolean {\r\n    if (this.cache.has(key)) {\r\n      if (this.cache.get(key).expiry < Date.now()) {\r\n        this.cache.delete(key);\r\n        return false;\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { throwError as observableThrowError, Observable, of, forkJoin, empty } from 'rxjs';\r\n\r\nimport { Util } from '../other/util';\r\nimport { LogService } from './log.service';\r\nimport { CacheService } from './cache.service';\r\nimport { Entity, PartialEntity, BaseEntity, Group, Country } from '../models/entity';\r\nimport { CapabilityMap, Observability } from '../models/capability';\r\nimport { Vulnerability } from '../models/vulnerability';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EntityService {\r\n\r\n  serviceUrl: string = '';\r\n\r\n  GET_ENTITY = '/entity/';\r\n  GET_ENTITIES_BY_SUBSTRING = '/entity/getEntitiesBySubstring/';\r\n  GET_ALL_CAPABILITY_TYPES = '/entity/getAllCapabilityTypes';\r\n  GET_ALL_CAPABILITY_MAPS = '/entity/getAllCapabilityMaps';\r\n  GET_ALL_VULNERABILITIES = '/entity/getAllVulnerabilities';\r\n  GET_ALL_AFFILIATIONS = '/entity/getAllAffiliations';\r\n  GET_ALL_COUNTRIES = '/entity/getAllCountries';\r\n  CREATE_GROUP = '/entity/createGroupByGroupName';\r\n  GET_ALL_ENTITY_GROUPS = '/entity/getAllEntityGroups';\r\n  GET_ENTITIES_BY_GROUP = '/entity/getEntitiesByGroup/';\r\n\r\n  GET_PARTIAL_ENTITIES_BY_GROUP = '/entity/getPartialEntitiesByGroup/';\r\n  PARTIAL_ENTITIES_BY_SUBSTRINGS = '/entity/partial';\r\n\r\n  UPDATE_ENTITY = '/entity/';\r\n  ADD_OR_UPDATE_CAPABILITY_MAP = '/entity/addOrUpdateCapabilityMap';\r\n  ADD_OR_UPDATE_OBSERVABILITY = '/entity/addOrUpdateObservability';\r\n\r\n  DELETE_ENTITIES = '/entity/deleteEntitiesByIds';\r\n  DELETE_CAPABILITY_MAPS = '/entity/deleteCapabilityMapsByIds';\r\n  DELETE_OBSERVABILITY = '/entity/deleteObservability/';\r\n  DELETE_GROUPS = '/entity/deleteGroupsByIds';\r\n\r\n  DEFAULT_SEARCH_TYPES = ['name', 'group'];\r\n\r\n  constructor(private http: HttpClient, private logService: LogService,\r\n    private cacheService: CacheService) { }\r\n\r\n  init(serviceUrl: string) {\r\n    this.serviceUrl = serviceUrl;\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  // getPartialEntitiesBySubstring(substring: ByteString): Observable<PartialEntity[]> {\r\n  //   this.logService.debug('EntityService.getPartialEntitiesBySubstring()');\r\n  //   const url = Util.urlJoin(this.serviceUrl, this.GET_ENTITIES_BY_SUBSTRING, substring);\r\n\r\n  //   return this.cacheService.get(url, this.http.get<PartialEntity[]>(url, httpOptions)).pipe(\r\n  //     tap(res => this.logService.debug(`    retreived entity list by substring`, res)),\r\n  //     map(res => res.map(item => new PartialEntity(item)))\r\n  //   );\r\n  // }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  getAllCapabilityTypes(useCache: boolean = true): Observable<string[]> {\r\n    this.logService.debug('EntityService.getAllCapabilityTypes()');\r\n    const url = Util.urlJoin(this.serviceUrl, this.GET_ALL_CAPABILITY_TYPES);\r\n\r\n    if (!useCache) {\r\n      this.cacheService.delete(url);\r\n    }\r\n\r\n    return this.cacheService.get(url, this.http.get<any>(url, httpOptions)).pipe(\r\n      tap(res => this.logService.debug(`    retreived capability type list`, res)),\r\n      map((res) => { // sort the list\r\n        return (res['strings'] as string[]).sort((n1, n2) => {\r\n          return n1.toLowerCase().localeCompare(n2.toLowerCase());\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * GET /entity/getAllCapabilityMaps\r\n   * get a list of CapabilityMap\r\n   **************************************************************************/\r\n  getAllCapabilityMaps(useCache: boolean = true): Observable<CapabilityMap[]> {\r\n    this.logService.debug('EntityService.getAllCapabilityMaps()');\r\n    const url = Util.urlJoin(this.serviceUrl, '/entity/getAllCapabilityMaps');\r\n\r\n    if (!useCache) {\r\n      this.cacheService.delete(url);\r\n    }\r\n\r\n    // compare function\r\n    let compareCapabilityMap = (n1: CapabilityMap, n2: CapabilityMap) => {\r\n      return n1.capabilityType.toLowerCase().localeCompare(n2.capabilityType.toLowerCase());\r\n    };\r\n\r\n    return this.cacheService.get(url, this.http.get<CapabilityMap[]>(url, httpOptions)).pipe(\r\n      tap(res => this.logService.debug(`    retreived capability map list`, res)),\r\n      map(res => res.map(item => new CapabilityMap(item)).sort(compareCapabilityMap))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * GET /entity/getObservabilitiesByUsedCapabilityMapId\r\n   * get a list of Observability\r\n   **************************************************************************/\r\n  getObservabilitiesByUsedCapabilityMapId(capabilityMapId: string): Observable<Observability[]> {\r\n    this.logService.debug('EntityService.getObservabilitiesByUsedCapabilityMapId()');\r\n    const url = Util.urlJoin(this.serviceUrl, '/entity/getObservabilitiesByUsedCapabilityMapId/', capabilityMapId);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived capability map list`, res)),\r\n      map(res => res.map(item => new Observability(item)))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  getAllVulnerabilities(useCache: boolean = true): Observable<Vulnerability[]> {\r\n    this.logService.debug('EntityService.getAllVulnerabilities()');\r\n    const url = Util.urlJoin(this.serviceUrl, this.GET_ALL_VULNERABILITIES);\r\n\r\n    if (!useCache) {\r\n      this.cacheService.delete(url);\r\n    }\r\n\r\n    // compare function\r\n    let compareVulnerability = (n1: Vulnerability, n2: Vulnerability) => {\r\n      return n1.name.toLowerCase().localeCompare(n2.name.toLowerCase());\r\n    };\r\n\r\n    return this.cacheService.get(url, this.http.get<Vulnerability[]>(url, httpOptions)).pipe(\r\n      tap(res => this.logService.debug(`    retreived all vulnerabilities`, res)),\r\n      map(res => res.map(item => new Vulnerability(item)).sort(compareVulnerability))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  getCapabilitiesByObservableType(observableType: string, useCache: boolean = true): Observable<CapabilityMap[]> {\r\n    this.logService.debug('EntityService.getCapabilitiesByObservableType()');\r\n    const url = Util.urlJoin(this.serviceUrl, '/entity/getCapabilitiesByObserverType/', observableType);\r\n\r\n    if (!useCache) {\r\n      this.cacheService.delete(url);\r\n    }\r\n\r\n    return this.cacheService.get(url, this.http.get<CapabilityMap[]>(url, httpOptions)).pipe(\r\n      tap(res => this.logService.debug(`    retreived capabilities list`, res)),\r\n      map(res => res.map(item => new CapabilityMap(item)))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  getAllAffiliations(useCache: boolean = true): Observable<string[]> {\r\n    this.logService.debug('EntityService.getAllAffiliations()');\r\n    const url = Util.urlJoin(this.serviceUrl, this.GET_ALL_AFFILIATIONS);\r\n\r\n    if (!useCache) {\r\n      this.cacheService.delete(url);\r\n    }\r\n\r\n    return this.cacheService.get(url, this.http.get<any>(url, httpOptions)).pipe(\r\n      tap(res => this.logService.debug(`    retreived affiliation list`, res)),\r\n      map(res => {\r\n        return res.map(item => {\r\n          return item.affiliation;\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  getAllCountries(useCache: boolean = true): Observable<Country[]> {\r\n    this.logService.debug('EntityService.getAllCountries()');\r\n    const url = Util.urlJoin(this.serviceUrl, this.GET_ALL_COUNTRIES);\r\n\r\n    if (!useCache) {\r\n      this.cacheService.delete(url);\r\n    }\r\n\r\n    // compare function\r\n    let compareCountry = (n1: Country, n2: Country) => {\r\n      return n1.name.toLowerCase().localeCompare(n2.name.toLowerCase());\r\n    };\r\n\r\n    return this.cacheService.get(url, this.http.get<Country[]>(url, httpOptions)).pipe(\r\n      tap(res => this.logService.debug(`    retreived country list`, res)),\r\n      map(res => res.keyValuePairs.map(item => new Country(item)).sort(compareCountry))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  createGroup(group: Group, entityIds: string[]): Observable<any> {\r\n    const url = Util.urlJoin(this.serviceUrl, this.CREATE_GROUP, encodeURIComponent(group.groupName));\r\n    let component = this;\r\n\r\n    let data = {\r\n      strings: entityIds,\r\n    };\r\n\r\n    return this.http.post(url, data, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    created group`, res))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  getAllEntityGroups(useCache: boolean = true): Observable<Group[]> {\r\n    this.logService.debug('EntityService.getAllEntityGroups()');\r\n    const url = Util.urlJoin(this.serviceUrl, this.GET_ALL_ENTITY_GROUPS);\r\n\r\n    if (!useCache) {\r\n      this.cacheService.delete(url);\r\n    }\r\n\r\n    // compare function\r\n    let compareGroup = (n1: Group, n2: Group) => {\r\n      return n1.groupName.toLowerCase().localeCompare(n2.groupName.toLowerCase());\r\n    };\r\n\r\n    return this.cacheService.get(url, this.http.get<Group[]>(url, httpOptions)).pipe(\r\n      tap(res => this.logService.debug(`    retreived all groups`, res)),\r\n      map(res => res.keyValuePairs.map(item => new Group(item)).sort(compareGroup))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  getEntity(id: string): Observable<Entity> {\r\n    const url = Util.urlJoin(this.serviceUrl, this.GET_ENTITY, id);\r\n    this.logService.debug(url);\r\n\r\n    return this.http.get<Entity>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived entity`, res)),\r\n      map(x => new Entity(x))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  getEntityById(id: string): Observable<Entity> {\r\n    this.logService.debug('EntityService.getEntityById()');\r\n    const url = Util.urlJoin(this.serviceUrl, '/entity/getEntityById', id);\r\n\r\n    return this.http.get<Entity>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived entity`, res)),\r\n      map(x => new Entity(x))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  addEntity(entity: Entity): Observable<any> {\r\n    this.logService.debug('EntityService.addEntity()');\r\n    const url = Util.urlJoin(this.serviceUrl, this.UPDATE_ENTITY);\r\n\r\n    let component = this;\r\n    return this.http.post(url, entity, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    updated entity ${entity.name}`, res))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  updateEntity(entity: Entity): Observable<any> {\r\n    this.logService.debug('EntityService.updateEntity()');\r\n    const url = Util.urlJoin(this.serviceUrl, this.UPDATE_ENTITY, entity.agsEntityId);\r\n\r\n    let component = this;\r\n    return this.http.put(url, entity, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    updated entity ${entity.name}`, res))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  addCapabilityMap(capabilityMap: CapabilityMap): Observable<any> {\r\n    this.logService.debug('EntityService.addCapabilityMap');\r\n    return this.updateCapabilityMap(capabilityMap);\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  updateCapabilityMap(capabilityMap: CapabilityMap): Observable<any> {\r\n    this.logService.debug('EntityService.updateCapabilityMap()');\r\n    const url = Util.urlJoin(this.serviceUrl, this.ADD_OR_UPDATE_CAPABILITY_MAP);\r\n\r\n    let component = this;\r\n    return this.http.post(url, capabilityMap, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    updated capability map ${capabilityMap.capabilityType}`, res))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  getPartialEntitiesByGroup(group: string): Observable<PartialEntity[]> {\r\n    this.logService.debug('EntityService.getPartialEntitiesByGroup()');\r\n    const url = Util.urlJoin(this.serviceUrl, this.GET_PARTIAL_ENTITIES_BY_GROUP, encodeURIComponent(group));\r\n\r\n    // compare function\r\n    let comparePartialEntity = (n1: PartialEntity, n2: PartialEntity) => {\r\n      return n1.name.toLowerCase().localeCompare(n2.name.toLowerCase());\r\n    };\r\n\r\n    return this.http.get<PartialEntity[]>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived partial entity list by group`, res)),\r\n      map(res => res.map(item => new PartialEntity(item)).sort(comparePartialEntity))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  partialEntitiesBySubstrings(strings: string[], searchTypes: string[] = this.DEFAULT_SEARCH_TYPES): Observable<PartialEntity[]> {\r\n    this.logService.debug('EntityService.partialEntitiesBySubstrings()');\r\n    const url = Util.urlJoin(this.serviceUrl, this.PARTIAL_ENTITIES_BY_SUBSTRINGS);\r\n\r\n    let searchParms = {\r\n      searchTypes: searchTypes,\r\n      strings: strings,\r\n    };\r\n\r\n    // compare function\r\n    let comparePartialEntity = (n1: PartialEntity, n2: PartialEntity) => {\r\n      return n1.name.toLowerCase().localeCompare(n2.name.toLowerCase());\r\n    };\r\n\r\n    return this.http.post<any>(url, searchParms, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived partial entity list by substrings`, res)),\r\n      map(res => res.map(item => new PartialEntity(item)).sort(comparePartialEntity))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  deleteEntities(entityIds: string[]) {\r\n    this.logService.debug('EntityService.deleteEntities');\r\n    const url = Util.urlJoin(this.serviceUrl, this.DELETE_ENTITIES);\r\n\r\n    // NOTE:  In order to specify the return type of 'text', the generic\r\n    //        signature had to be removed.\r\n    const deleteOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      responseType: 'text' as 'text',\r\n      body: {\r\n        strings: entityIds\r\n      },\r\n    };\r\n\r\n    let component = this;\r\n    // return this.http.delete<any>(url, deleteOptions).pipe(\r\n    return this.http.delete(url, deleteOptions).pipe(\r\n      tap(res => this.logService.debug(`    deleted entities successfully`))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  deleteCapabilities(capabilityIds: string[]) {\r\n    this.logService.debug('EntityService.deleteCapabilities');\r\n    const url = Util.urlJoin(this.serviceUrl, this.DELETE_CAPABILITY_MAPS);\r\n\r\n    const deleteOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      responseType: 'text' as 'text',\r\n      body: {\r\n        strings: capabilityIds\r\n      },\r\n    };\r\n\r\n    let component = this;\r\n    return this.http.delete(url, deleteOptions).pipe(\r\n      tap(res => this.logService.debug(`    deleted capabilities successfully`))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  addObservabilities(observabilities: Observability[]): Observable<any> {\r\n    if (!observabilities || observabilities.length === 0) {\r\n      return of('addObservabilities received empty list.  Consider successful.');\r\n    }\r\n\r\n    let addRequests: Observable<string>[] = [];\r\n    observabilities.forEach(o => {\r\n      addRequests.push(this.addObservability(o));\r\n    });\r\n\r\n    return forkJoin(...addRequests);\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  addObservability(observability: Observability): Observable<string> {\r\n    this.logService.debug('EntityService.addObservability');\r\n    const url = Util.urlJoin(this.serviceUrl, this.ADD_OR_UPDATE_OBSERVABILITY);\r\n\r\n    let component = this;\r\n    return this.http.post<string>(url, observability, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    added observability successfully`, res))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  deleteObservabilities(observabilities: Observability[]): Observable<any> {\r\n    if (!observabilities || observabilities.length === 0) {\r\n      return of('deleteObservabilities received empty list.  Consider successful.');\r\n    }\r\n\r\n    let deleteRequests: Observable<string>[] = [];\r\n    observabilities.forEach(o => {\r\n      deleteRequests.push(this.deleteObservability(o));\r\n    });\r\n\r\n    return forkJoin(...deleteRequests);\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  deleteObservability(observability: Observability): Observable<string> {\r\n    this.logService.debug('EntityService.deleteObservability');\r\n    const url = Util.urlJoin(this.serviceUrl, this.DELETE_OBSERVABILITY, observability.observingCapabilityMapId, observability.usedCapabilityMapId);\r\n\r\n    // NOTE:  In order to specify the return type of 'text', the generic\r\n    //        signature had to be removed.\r\n    const deleteOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      responseType: 'text' as 'text',\r\n    };\r\n\r\n    let component = this;\r\n    return this.http.delete(url, deleteOptions).pipe(\r\n      tap(res => this.logService.debug(`    deleted observability successfully`))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   *\r\n   *\r\n   **************************************************************************/\r\n  deleteGroups(groupIds: string[]): Observable<string> {\r\n    this.logService.debug('EntityService.deleteGroups');\r\n    const url = Util.urlJoin(this.serviceUrl, this.DELETE_GROUPS);\r\n\r\n    // NOTE:  In order to specify the return type of 'text', the generic\r\n    //        signature had to be removed.\r\n    const deleteOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      responseType: 'text' as 'text',\r\n      body: {\r\n        strings: groupIds\r\n      },\r\n\r\n    };\r\n\r\n    let component = this;\r\n    return this.http.delete(url, deleteOptions).pipe(\r\n      tap(res => this.logService.debug(`    deleted groups successfully`))\r\n    );\r\n  }\r\n\r\n  // Rethrow error so client can react.\r\n  private rethrowError(err: any) {\r\n    // NOTE:  Not an error.\r\n    if (err.status === 200 || err.status === 204) {\r\n      return of(err);\r\n    }\r\n\r\n    if (err instanceof Response) {\r\n      return observableThrowError(err);\r\n    }\r\n    return observableThrowError(err);\r\n  }\r\n\r\n  loadEntities(group: string): Observable<BaseEntity[]> {\r\n    this.logService.debug('EntityService.loadEntities');\r\n    const url = Util.urlJoin(this.serviceUrl, '/entity/getPartialEntitiesByGroup/' + encodeURIComponent(group));\r\n\r\n    return this.http.get<BaseEntity[]>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived event model ${name}`, res)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Optional, Output, Self, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl, FormGroup, NgControl, ControlValueAccessor } from '@angular/forms';\r\nimport { empty } from 'rxjs';\r\nimport { debounceTime, switchMap } from 'rxjs/operators';\r\nimport { PartialEntity, Group } from '../../models/entity';\r\nimport { EntityService } from '../../services/entity.service';\r\nimport { LogService } from '../../services/log.service';\r\nimport { forEach } from '@angular/router/src/utils/collection';\r\n\r\nconst INVALID_ENTITY: PartialEntity = new PartialEntity({\r\n  name: '',\r\n  agsEntityId: '',\r\n});\r\n\r\n\r\n@Component({\r\n  selector: 'ags-lib-entity-selector',\r\n  templateUrl: './entity-selector.component.html',\r\n  styleUrls: ['./entity-selector.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class EntitySelectorComponent implements ControlValueAccessor, OnInit, OnChanges {\r\n\r\n  @Input() label: string = '';\r\n  @Input() name: string = '';\r\n  @Input() id: string = '';\r\n  // @Output() entitySelected = new EventEmitter<PartialEntity>();\r\n\r\n  onChange: Function;\r\n  onTouched: Function;\r\n\r\n  entitySelectionFormGroup: FormGroup;\r\n  inputCtrl: FormControl;\r\n  optionsCtrl: FormControl;\r\n  entities: PartialEntity[] = [];\r\n  hasFocus: boolean = false;\r\n  incomingEntity: PartialEntity = INVALID_ENTITY;\r\n  selectedEntity: PartialEntity = INVALID_ENTITY;\r\n  isSearching = false;\r\n\r\n  // ControlValueAccessor methods\r\n  writeValue(value) { this.selectedEntity.entityId = value; }\r\n  registerOnChange(fn) { this.onChange = fn; }\r\n  registerOnTouched(fn) { this.onTouched = fn; }\r\n\r\n  constructor(\r\n    @Optional() @Self() public ngControl: NgControl,\r\n    private entityService: EntityService,\r\n    private logService: LogService) {\r\n      this.createForm();\r\n\r\n      if (this.ngControl != null) { this.ngControl.valueAccessor = this; }\r\n  }\r\n\r\n  createForm() {\r\n    this.inputCtrl = new FormControl(\r\n      { value: '', disabled: false }, \r\n      { /* validators: Validators.required */}\r\n    );\r\n    this.optionsCtrl = new FormControl();\r\n\r\n    this.entitySelectionFormGroup = new FormGroup({\r\n      inputCtrl: this.inputCtrl,\r\n      optionsCtrl: this.optionsCtrl,\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    const component = this;\r\n    this.inputCtrl.valueChanges.pipe(\r\n      debounceTime(500),\r\n      switchMap((term) => {\r\n        let termType = typeof term;\r\n        if (!term || (termType.localeCompare('string') !== 0) || (term.length < 2)) {\r\n          component.entities = [];\r\n          component.isSearching = false;\r\n          return empty();\r\n        }\r\n        else {\r\n          component.isSearching = true;\r\n          component.entities = [];\r\n          return component.entityService.partialEntitiesBySubstrings(term.split(' '));\r\n        }\r\n    }))\r\n    .subscribe((result) => {\r\n      component.isSearching = false;\r\n      component.entities = result;\r\n    });\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.id) {\r\n      this.incomingEntity = new PartialEntity({\r\n        name: this.name,\r\n        agsEntityId: this.id,\r\n      });\r\n    }\r\n    else {\r\n      this.incomingEntity = INVALID_ENTITY;\r\n    }\r\n\r\n    // Start with incoming equal to selected\r\n    this.selectedEntity = this.incomingEntity;\r\n\r\n    if (this.entitySelectionFormGroup) {\r\n      this.entitySelectionFormGroup.reset({\r\n        inputCtrl: this.incomingEntity,\r\n      });\r\n    }\r\n  }\r\n\r\n  displayEntityAs(entity?: PartialEntity): string | undefined {\r\n    if (entity && entity.name) {\r\n      return entity.name.trim();\r\n    }\r\n    else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  // Ensure no list pops up when entering control.\r\n  onFocus(event) {\r\n    this.entities = [];\r\n    this.hasFocus = true;\r\n  }\r\n\r\n  onBlur(event) {\r\n    this.entitySelectionFormGroup.reset({\r\n      inputCtrl: this.selectedEntity,\r\n    });\r\n\r\n    this.hasFocus = false;\r\n  }\r\n\r\n  onSelected(event) {\r\n    this.selectedEntity = event.source.value;\r\n    this.name = this.selectedEntity.name;\r\n    this.id = this.selectedEntity.entityId;\r\n\r\n    this.onChange(this.selectedEntity.entityId);\r\n  }\r\n\r\n  onMouseDown() {\r\n    this.selectedEntity = INVALID_ENTITY;\r\n    this.name = '';\r\n    this.id = '';\r\n\r\n    this.onChange('');\r\n\r\n    if (this.selectedEntity !== this.incomingEntity) {\r\n      this.incomingEntity = INVALID_ENTITY;\r\n    }\r\n    this.entities = [];\r\n    this.entitySelectionFormGroup.get('inputCtrl').setValue('', {emitEvent: false});\r\n  }\r\n\r\n  getTitle(entity: PartialEntity) {\r\n    let title: string = '';\r\n\r\n    title += 'SCC:  ' + (entity.scc ? entity.scc.trim() : '');\r\n    title += '\\nCountry:  ' + (entity.countryName ? entity.countryName.trim() : '');\r\n    title += '\\nAffiliation:  ' + (entity.affiliation ? entity.affiliation.trim() : '');\r\n\r\n    return title;\r\n  }\r\n\r\n  formatResults(entity: PartialEntity, searchTerm: string) {\r\n    let result: string = '';\r\n    let terms = searchTerm.split(' ');\r\n    result += entity.name.trim();\r\n\r\n    // Add SCC if present\r\n    if (entity.scc) {\r\n      result += ', ' + entity.scc;\r\n    }\r\n\r\n    function areAllTermsFound(termsToSearchFor, stringToSearch) {\r\n      let found = true;\r\n      for (let i = 0; i < termsToSearchFor.length; i++) {\r\n        if (stringToSearch.toUpperCase().indexOf(termsToSearchFor[i].toUpperCase()) < 0) {\r\n          found = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      return found;\r\n    }\r\n\r\n    // Add matching group name(s)\r\n    let groupText: string = '';\r\n    let firstGroup: boolean = true;\r\n    entity.groups.forEach(group => {\r\n\r\n      if (areAllTermsFound(terms, group.groupName)) {\r\n        if (!firstGroup) {\r\n          groupText += ', ';\r\n        }\r\n        groupText += group.groupName;\r\n        firstGroup = false;\r\n      }\r\n    });\r\n\r\n    if (groupText) {\r\n      result += ' (' + groupText + ')';\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","/* \r\n *  Displays a list of items as Angular Material chips.\r\n *  - a button is pressed to display list of selectable items\r\n *  - \"onChange\" is fired upon selection from list (either by mouse or <enter>)\r\n *  - each chip has an embedded icon which removes chip from list\r\n */\r\nimport { Component, OnInit, ViewEncapsulation, Input, Optional, Self, OnChanges } from '@angular/core';\r\nimport { KeyValue } from '@angular/common';\r\nimport { NgControl, ControlValueAccessor } from '@angular/forms';\r\nimport { LogService } from '../../services/log.service';\r\n\r\n@Component({\r\n  selector: 'ags-lib-chip-display',\r\n  templateUrl: './chip-display.component.html',\r\n  styleUrls: ['./chip-display.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ChipDisplayComponent implements OnInit, OnChanges, ControlValueAccessor {\r\n\r\n  // Label to be displayed as placeholder\r\n  @Input() label: string = '';\r\n  // List of items from which to choose.\r\n  // key = displayed value (e.g. group name)\r\n  // value = as a rule, the internal GUID (e.g. group ID)\r\n  @Input() selectableItems: KeyValue<string, any>[];\r\n  // Can an item be added more than once?\r\n  @Input() allowDuplicates: boolean = true;\r\n  // Is control disabled?\r\n  @Input() enabled: boolean = true;\r\n  // Property name on which to base equality\r\n  @Input() equalityProperty: string = '';\r\n  \r\n  // \"selectedItems\" is updated by setting value of form control and not via input parms\r\n  selectedItems: KeyValue<string, any>[];\r\n  // \"remainingSelectableItems\" is dependent on value of \"allowDuplicates\"\r\n  remainingSelectableItems: KeyValue<string, any>[];\r\n\r\n  onChange: Function;\r\n  onTouched: Function;\r\n\r\n  //\r\n  // ControlValueAccessor methods\r\n  writeValue(value: KeyValue<string, any>[]) { \r\n    this.selectedItems = value;\r\n    this.determineRemainingSelectableItems();\r\n  }\r\n  registerOnChange(fn) { this.onChange = fn; }\r\n  registerOnTouched(fn) { this.onTouched = fn; }\r\n  //\r\n\r\n  constructor(\r\n    @Optional() @Self() public ngControl: NgControl,\r\n    private logService: LogService) {\r\n  \r\n      if (this.ngControl != null) { \r\n        this.ngControl.valueAccessor = this;\r\n      }\r\n    }\r\n\r\n  ngOnInit() {}\r\n\r\n  // Gets fired on changes to all inputs, but only need to take some action when\r\n  // selectable items get changed.\r\n  ngOnChanges(changes) {\r\n    if (changes.selectableItems) {\r\n      // If remaining items list hasn't yet been populated, do that now.\r\n      if (!this.remainingSelectableItems) {\r\n        this.remainingSelectableItems = this.selectableItems.slice(0, this.selectableItems.length);\r\n      }\r\n      this.determineRemainingSelectableItems();\r\n    }\r\n  }\r\n\r\n  // Item selected from list\r\n  onSelected(item: KeyValue<string, any>) {\r\n    this.selectedItems.push(item);\r\n    this.determineRemainingSelectableItems();\r\n    this.onChange(this.selectedItems);\r\n  }\r\n\r\n  // Item removed from displayed chips\r\n  onRemoved(item: KeyValue<string, any>) {\r\n    const index = this.selectedItems.indexOf(item);\r\n    if (index >= 0) {\r\n      this.selectedItems.splice(index, 1);\r\n    }\r\n    this.determineRemainingSelectableItems();\r\n    this.onChange(this.selectedItems);\r\n  }\r\n\r\n  // If \"Allow duplicates\" flag is \"true\", keep selectable list the same.\r\n  // If \"Allow duplicates\" flag is \"false\", remove selected items from selectable list.\r\n  determineRemainingSelectableItems(): void {\r\n    if (!this.selectedItems || !this.selectableItems) {\r\n      return;\r\n    }\r\n\r\n    if (!this.allowDuplicates) {\r\n      this.remainingSelectableItems = this.selectableItems.filter(x => {\r\n        return !this.findItemInList(x, this.selectedItems);\r\n      });\r\n    }\r\n  }\r\n\r\n  // Search for equality of items by comparing value in KeyValue pair\r\n  findItemInList(item: KeyValue<string, any>, list: KeyValue<string, any>[]): boolean {\r\n\r\n    if (!item || list.length === 0)  {\r\n      return false;\r\n    }\r\n\r\n    let itemValueType = typeof item.value;\r\n    let listValueType = typeof list[0].value;\r\n    if (itemValueType !== listValueType) {\r\n      this.logService.warn('Chip display comparing unequal types.  Ensure selectable items and selected items are of same type.');\r\n      return false;\r\n    }\r\n\r\n    if (itemValueType === 'number') {\r\n      return this.compareNumbers(item, list);\r\n    }\r\n    else if (itemValueType === 'string') {\r\n      return this.compareStrings(item, list);\r\n    }\r\n    else if (itemValueType === 'object' && this.equalityProperty &&\r\n      item.value.hasOwnProperty(this.equalityProperty)) {\r\n      return this.compareObjects(item, list);\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  compareNumbers(item: KeyValue<string, any>, list: KeyValue<string, any>[]): boolean {\r\n    let index = list.length;\r\n    while (index--) {\r\n      if (list[index].value === item.value) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  compareStrings(item: KeyValue<string, any>, list: KeyValue<string, any>[]): boolean {\r\n    let index = list.length;\r\n    while (index--) {\r\n      if (list[index].value.localeCompare(item.value) === 0) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  compareObjects(item: KeyValue<string, any>, list: KeyValue<string, any>[]): boolean {\r\n    let index = list.length;\r\n\r\n    while (index--) {\r\n      if (list[index].value[this.equalityProperty] === item.value[this.equalityProperty]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","/*\r\nThis custom component is a wrapper around the Angular Date Time Picker (ng-pick-datetime)\r\nhttps://www.npmjs.com/package/ng-pick-datetime\r\nhttps://danielykpan.github.io/date-time-picker/\r\n\r\nThis control ONLY produces UTC date/times\r\n\r\nThere is a line of code in onChanges() method to force the value to a UTC date/time.\r\nThe ng-pick-datetime control (<owl-date-time>) insists on appending the local timezone every time\r\nyou click it. So 'moment.toObject()' is utilized because it returns the parts of the\r\ndate without a timezone. This allows the creation of a new moment object without a\r\nlocal timezone. It's hacky, but it gets the job done. Maybe someday Angular Material\r\nwill create a datetime picker that can properly handle UTC. :^(\r\n\r\nmoment.toObject() = {\r\n    years: 2015\r\n    months: 6\r\n    date: 26,\r\n    hours: 1,\r\n    minutes: 53,\r\n    seconds: 14,\r\n    milliseconds: 600\r\n}\r\n\r\n*/\r\n\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { Component, ElementRef, Input, OnDestroy, HostBinding, forwardRef, Optional, Self, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\r\nimport { MatFormFieldControl } from '@angular/material';\r\nimport { Subject } from 'rxjs';\r\nimport moment from 'moment-es6';\r\nimport { DateTimeAdapter, OWL_DATE_TIME_FORMATS, OWL_DATE_TIME_LOCALE } from 'ng-pick-datetime';\r\nimport { MomentDateTimeAdapter } from 'ng-pick-datetime-moment';\r\nimport { DateFormatPipe } from '../../other/pipes';\r\n\r\nexport const MY_CUSTOM_FORMATS = {\r\n  parseInput: 'YYYY-MM-DD HH:mm:ss',\r\n  fullPickerInput: DateFormatPipe.format,\r\n  datePickerInput: 'YYYY-MM',\r\n  timePickerInput: 'hh:mm:ss',\r\n  monthYearLabel: 'MMM YYYY',\r\n  dateA11yLabel: 'MMM YYYY',\r\n  monthYearA11yLabel: 'MMM YYYY',\r\n};\r\n\r\n@Component({\r\n  selector: 'ags-lib-date-time-picker',\r\n  templateUrl: './date-time-picker.component.html',\r\n  styleUrls: ['./date-time-picker.component.scss'],\r\n  providers: [{ provide: MatFormFieldControl, useExisting: DateTimePickerComponent },\r\n  { provide: DateTimeAdapter, useClass: MomentDateTimeAdapter, deps: [OWL_DATE_TIME_LOCALE] },\r\n  { provide: OWL_DATE_TIME_FORMATS, useValue: MY_CUSTOM_FORMATS }\r\n  ],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class DateTimePickerComponent implements ControlValueAccessor, MatFormFieldControl<string>, OnDestroy {\r\n  @HostBinding('class.floating') get shouldLabelFloat() { return this.focused || !this.empty; }\r\n  @HostBinding('id') id = `date-time-picker-${DateTimePickerComponent.nextId++}`;\r\n  @HostBinding('attr.aria-describedby') describedBy = '';\r\n\r\n  // Implementation of MatFormFieldControl\r\n  // tslint:disable-next-line:member-ordering\r\n  static nextId = 0;\r\n  stateChanges = new Subject<void>();\r\n  focused = false;\r\n  errorState = false;\r\n  controlType = 'date-time-picker';\r\n\r\n  private _placeholder: string;\r\n  private _required = false;\r\n  private _disabled = false;\r\n  _momentValue: moment.Moment = moment(); // usa a Moment object internally to store the date value\r\n  ///////////////////\r\n\r\n  // Implementation of ControlValueAccessor\r\n  onChange: Function;\r\n  onTouched: Function;\r\n  writeValue(inValue: string) { \r\n    console.log(`date-time-picker input string = ${inValue}`);\r\n    this.value = inValue;\r\n  }\r\n  registerOnChange(fn) { this.onChange = fn; }\r\n  registerOnTouched(fn) { this.onTouched = fn; }\r\n  setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\r\n  //////////////////////\r\n\r\n  // Implementation of MatFormFieldControl properties\r\n  @Input()\r\n  get placeholder(): string { return this._placeholder; }\r\n  set placeholder(value: string) {\r\n    this._placeholder = 'value';\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  @Input()\r\n  get value(): string | null {\r\n    return this._momentValue.utc().toISOString();\r\n  }\r\n  set value(newVal: string | null) {\r\n    this._momentValue = moment.utc(newVal);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  get empty() {\r\n    return !this._momentValue;\r\n  }\r\n  /////////////////////\r\n\r\n  constructor(private fm: FocusMonitor, private elRef: ElementRef,\r\n    @Optional() @Self() public ngControl: NgControl) {\r\n\r\n    // Implementation of MatFormFieldControl interface\r\n    this.fm.monitor(elRef.nativeElement, true).subscribe(origin => {\r\n      this.focused = !!origin;\r\n      this.stateChanges.next();\r\n    });\r\n    if (this.ngControl != null) { this.ngControl.valueAccessor = this; } // required for interaction with Angular forms\r\n    /////////////\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.stateChanges.complete();\r\n    this.fm.stopMonitoring(this.elRef.nativeElement);\r\n  }\r\n\r\n  // Implementation of MatFormFieldControl methods\r\n  setDescribedByIds(ids: string[]) {\r\n    this.describedBy = ids.join(' ');\r\n  }\r\n\r\n  onContainerClick(event: MouseEvent) {\r\n    if ((event.target as Element).tagName.toLowerCase() !== 'input') {\r\n      this.elRef.nativeElement.querySelector('input').focus();\r\n    }\r\n  }\r\n  ////////////////////\r\n\r\n  // My functions\r\n\r\n  onDataChanged(event: any) {\r\n    this._momentValue = moment.utc(this._momentValue.toObject()); // force to UTC\r\n    console.log(`date-time-picker output string = ${this.value}`);\r\n    this.onChange(this.value); // required for interaction with Angular forms\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n/*\r\nThis service provides methods to load custom icons, and it provides methods for \r\nconverting states to icon names.\r\n\r\nTo use a custom icon in a <mat-icon> element...\r\n\r\n  <mat-icon svgIcon=\"custom-icon-name\"></mat-icon>\r\n\r\nTo create a state icon, there are 2 ways of doing it. You can use the <ags-lib-state-icon> component,\r\nOr you can use the icon service directly in a <mat-icon> element.\r\n\r\n  <ags-lib-state-icon state=\"executing\"></ags-lib-state-icon>\r\n  <mat-icon [svgIcon]=\"iconService.getIconNameFromState('executing')\" [ngClass]=\"iconService.getStateClass('executing')\"></mat-icon>\r\n\r\nThere are also UCI versions of the examples above, because UCI has it's own states and colors.\r\n\r\n  <ags-lib-uci-state-icon state=\"executing\"></ags-lib-uci-state-icon>\r\n  <mat-icon [svgIcon]=\"iconService.getIconNameFromUciState('executing')\" [ngClass]=\"iconService.getUciStateClass('executing')\"></mat-icon>\r\n*/\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IconService {\r\n\r\n  private _iconNameToSvgElementMap: Map<string, SVGElement> = new Map<string, SVGElement>();\r\n\r\n  // These are the custom icons to be loaded into the MatIconRegistry\r\n  // the first item is the icon name, and the second item is the file\r\n  // containing the SVG definition of the icon\r\n  private _iconNameToFileNameMap: Map<string, string> = new Map([\r\n    //[custom-icon-name, SVG file name]\r\n    ['circle-filled', 'assets/svg-icons/circle-filled.svg'],\r\n    ['circle-outlined', 'assets/svg-icons/circle-outlined.svg'],\r\n    ['add-event', 'assets/svg-icons/Add-Event.svg'],\r\n    ['back-to-now', 'assets/svg-icons/Back-to-Now.svg'],\r\n    ['connect-points', 'assets/svg-icons/Connect-Points.svg'],\r\n    ['delete', 'assets/svg-icons/Delete.svg'],\r\n    ['pushpin', 'assets/svg-icons/Pushpin.svg'],\r\n    ['refresh', 'assets/svg-icons/Refresh.svg'],\r\n    ['response-add', 'assets/svg-icons/Response-Add.svg'],\r\n    ['sequence', 'assets/svg-icons/Sequence.svg'],\r\n    ['setting', 'assets/svg-icons/Setting.svg'],\r\n    ['timeline', 'assets/svg-icons/Timeline.svg'],\r\n    ['status-ok', 'assets/svg-icons/Status-OK.svg'],\r\n    ['status-alert', 'assets/svg-icons/Status-ALERT.svg'],\r\n    ['status-caution', 'assets/svg-icons/Status-CAUTION.svg'],\r\n    ['status-error', 'assets/svg-icons/Status-ERROR.svg'],\r\n    ['status-off', 'assets/svg-icons/Status-OFF.svg'],\r\n    ['status-standby', 'assets/svg-icons/Status-STANDBY.svg']\r\n  ]);\r\n\r\n  // map state names to icon names\r\n  private _stateToIconNameMap: Map<string, string> = new Map([\r\n    //[state, icon name]\r\n    ['uci-unallocated', 'circle-filled'],\r\n    ['uci-allocated', 'circle-filled'],\r\n    ['uci-proposed', 'circle-filled'],\r\n    ['uci-planned', 'circle-filled'],\r\n    ['uci-executing', 'circle-outlined'],\r\n    ['uci-completed', 'circle-filled'],\r\n    ['uci-failed', 'circle-filled'],\r\n    ['uci-cancelled', 'circle-filled'],\r\n    ['uci-unknown', 'circle-outlined'],\r\n    ['off', 'circle-outlined'],\r\n    ['occurring', 'circle-filled'],\r\n    ['executing', 'circle-filled'],\r\n    ['occurred', 'circle-filled'],\r\n    ['ok', 'circle-filled'],\r\n    ['completed', 'circle-filled'],\r\n    ['caution', 'circle-filled'],\r\n    ['proposed', 'circle-filled'],\r\n    ['not_occurred', 'circle-filled'],\r\n    ['not-occurred', 'circle-filled'],\r\n    ['notoccurred', 'circle-filled'],\r\n    ['alert', 'circle-filled'],\r\n    ['failed', 'circle-filled'],\r\n    ['error', 'circle-filled'],\r\n    ['standby', 'circle-outlined'],\r\n    ['unknown', 'circle-outlined']\r\n  ]);\r\n\r\n  constructor(private iconRegistry: MatIconRegistry,\r\n    private sanitizer: DomSanitizer) {\r\n  }\r\n\r\n  /****************************************************************************\r\n   * load custom icons. Use them in HTML like this... <mat-icon svgIcon=\"add-event\"></mat-icon>\r\n   ****************************************************************************/\r\n  init() {\r\n    this._iconNameToFileNameMap.forEach((v, k) => {\r\n      this.iconRegistry.addSvgIcon(k, this.sanitizer.bypassSecurityTrustResourceUrl(v));\r\n    });\r\n\r\n    this._iconNameToFileNameMap.forEach((v, k) => {\r\n      this.iconRegistry.getNamedSvgIcon(k).subscribe(res => {\r\n        this._iconNameToSvgElementMap.set(k, res);\r\n      });\r\n    });\r\n  }\r\n\r\n  /****************************************************************************\r\n   * Get icon SVG element from icon string name\r\n   ****************************************************************************/\r\n  getIconSvgElement(iconStrName: string): SVGElement {\r\n    let svg: SVGElement;\r\n    try {\r\n      if (!iconStrName || iconStrName.length === 0 || !this._iconNameToSvgElementMap.has(iconStrName)) {\r\n        iconStrName = 'circle-outlined';\r\n      }\r\n      svg = this._iconNameToSvgElementMap.get(iconStrName);\r\n    } catch (e) {\r\n      svg = new SVGElement();\r\n    }\r\n    return svg;\r\n  }\r\n\r\n  /****************************************************************************\r\n   * \r\n   ****************************************************************************/\r\n  getIconNameFromState(state: string): string {\r\n    try {\r\n      if (!state || state.length === 0 || !this._stateToIconNameMap.has(state)) {\r\n        state = 'unknown';\r\n      }\r\n      return this._stateToIconNameMap.get(state);\r\n    } catch (e) {\r\n      return 'circle-outlined';\r\n    }\r\n  }\r\n\r\n  /****************************************************************************\r\n   * \r\n   ****************************************************************************/\r\n  getIconSvgElementFromState(state: string): SVGElement {\r\n    return this.getIconSvgElement(this.getIconNameFromState(state));\r\n  }\r\n\r\n  /****************************************************************************\r\n   * \r\n   ****************************************************************************/\r\n  getIconNameFromUciState(state: string): string {\r\n    return this.getIconNameFromState(`uci-${state}`);\r\n  }\r\n\r\n  /****************************************************************************\r\n   * \r\n   ****************************************************************************/\r\n  getIconSvgElementFromUciState(state: string): SVGElement {\r\n    return this.getIconSvgElementFromState(`uci-${state}`);\r\n  }\r\n\r\n  /****************************************************************************\r\n   * \r\n   ****************************************************************************/\r\n  getStateClass(state: string): string {\r\n    try {\r\n      if (!state || state.length === 0 || !this._stateToIconNameMap.has(state)) {\r\n        state = 'unknown';\r\n      }\r\n      return `state-${state.toLowerCase()}`;\r\n    } catch (e) {\r\n      return 'state-unknown';\r\n    }\r\n  }\r\n\r\n  /****************************************************************************\r\n   * \r\n   ****************************************************************************/\r\n  getUciStateClass(state: string): string {\r\n    try {\r\n      if (!state || state.length === 0 || !this._stateToIconNameMap.has(state)) {\r\n        state = 'unknown';\r\n      }\r\n      return `uci-state-${state.toLowerCase()}`;\r\n    } catch (e) {\r\n      return 'uci-state-unknown';\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\nimport { IconService } from '../../services/icon.service';\r\n\r\n\r\n@Component({\r\n  selector: 'ags-lib-state-icon',\r\n  template: `\r\n    <mat-icon [svgIcon]=\"iconService.getIconNameFromState(state)\" [ngClass]=\"iconService.getStateClass(state)\"></mat-icon>\r\n    `,\r\n    styleUrls: ['./state-icon.component.scss']\r\n})\r\nexport class StateIconComponent implements OnInit {\r\n\r\n  @Input() state: string;\r\n  \r\n  constructor(public iconService: IconService) { }\r\n\r\n  ngOnInit() {\r\n    this.iconService.init();\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'ags-lib-uci-state-icon',\r\n  template: `\r\n    <mat-icon [svgIcon]=\"iconService.getIconNameFromUciState(state)\" [ngClass]=\"iconService.getUciStateClass(state)\"></mat-icon>\r\n    `\r\n})\r\nexport class UciStateIconComponent implements OnInit {\r\n\r\n  @Input() state: string;\r\n  \r\n  constructor(public iconService: IconService) { }\r\n\r\n  ngOnInit() {\r\n    this.iconService.init();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MaterialModule } from './material.module';\r\nimport { OwlDateTimeModule, OwlNativeDateTimeModule } from 'ng-pick-datetime';\r\n\r\nimport { DateFormatPipe, TruncatePipe, OrderByPipe, HighlightPipe, RemoveItemPipe } from './other/pipes';\r\nimport { AnnotationComponent } from './components/annotation/annotation.component';\r\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\r\nimport { ProgressComponent } from './components/progress/progress.component';\r\nimport { TitleComponent } from './components/title/title.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { EmptyComponent } from './components/empty/empty.component';\r\nimport { EntitySelectorComponent } from './components/entity-selector/entity-selector.component';\r\nimport { ChipDisplayComponent } from './components/chip-display/chip-display.component';\r\nimport { DateTimePickerComponent } from './components/date-time-picker/date-time-picker.component';\r\nimport { StateIconComponent, UciStateIconComponent } from './components/state-icon/state-icon.component';\r\n\r\n@NgModule({\r\n  imports: [FormsModule, ReactiveFormsModule, MaterialModule, FlexLayoutModule,\r\n    CommonModule, OwlDateTimeModule, OwlNativeDateTimeModule\r\n  ],\r\n  declarations: [\r\n    AnnotationComponent,\r\n    ChipDisplayComponent,\r\n    DateFormatPipe,\r\n    DateTimePickerComponent,\r\n    EmptyComponent,\r\n    EntitySelectorComponent,\r\n    HighlightPipe,\r\n    LoginComponent,\r\n    OrderByPipe,\r\n    PageNotFoundComponent,\r\n    ProgressComponent,\r\n    RemoveItemPipe,\r\n    StateIconComponent,\r\n    TitleComponent,\r\n    TruncatePipe,\r\n    UciStateIconComponent\r\n  ],\r\n  exports: [\r\n    AnnotationComponent,\r\n    ChipDisplayComponent,\r\n    DateFormatPipe,\r\n    DateTimePickerComponent,\r\n    EmptyComponent,\r\n    EntitySelectorComponent,\r\n    HighlightPipe,\r\n    LoginComponent,\r\n    OrderByPipe,\r\n    PageNotFoundComponent,\r\n    ProgressComponent,\r\n    RemoveItemPipe,\r\n    StateIconComponent,\r\n    TitleComponent,\r\n    TruncatePipe,\r\n    UciStateIconComponent\r\n  ],\r\n  entryComponents: [\r\n  ]\r\n})\r\nexport class AgsHmiLibraryModule { }\r\n","/*-----------------------------------------------------------------------------\r\n*  The Boeing Company\r\n*\r\n*  Copyright (c) 2017 The Boeing Company  All rights reserved.\r\n*----------------------------------------------------------------------------*/\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, retry } from 'rxjs/operators';\r\nimport { WebSocketSubject, WebSocketSubjectConfig  } from 'rxjs/webSocket';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertService {\r\n\r\n  private serviceUrl;\r\n  private _wssConfig: WebSocketSubjectConfig<any>;\r\n  private _wss: WebSocketSubject<any>;\r\n  private get wss(): WebSocketSubject<any> {\r\n    if (!this._wss || this._wss.closed) {\r\n      console.log('AlertService: create WebSocketSubject');\r\n      this._wss = new WebSocketSubject(this._wssConfig);\r\n    } else {\r\n      console.log('AlertService: WebSocketSubject already created');\r\n    }\r\n    return this._wss;\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  init(serviceUrl: string) {\r\n    if (this._wss) {\r\n      this._wss.unsubscribe();\r\n      this._wss = null;\r\n    }\r\n\r\n    this._wssConfig = {\r\n      url: serviceUrl,\r\n      closeObserver: {\r\n        next: (e: CloseEvent) => {\r\n          console.log(`%c WEBSOCKET CLOSED `, `background: black; color: #fff; font-weight: bold;`, 'Attempting to reconnect...');\r\n        }\r\n      },\r\n      openObserver: {\r\n        next: (e: Event) => {\r\n          console.log(`%c WEBSOCKET OPEN `, `background: green; color: #fff; font-weight: bold;`);\r\n        }\r\n      }\r\n    };\r\n\r\n    this.serviceUrl = serviceUrl;\r\n  }\r\n\r\n  getMessages(): Observable<any> {\r\n    return this.wss.pipe(\r\n      // Adds ability to reconnect a disconnected websocket\r\n      // @see https://stackoverflow.com/a/44067972\r\n      retry(),\r\n      map(res => res) // this can be used to modify the incoming message\r\n    );\r\n  }\r\n\r\n  sendMessage(msg) {\r\n    this.wss.next(msg);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\nimport { Util } from '../other/util';\r\nimport { LogService } from './log.service';\r\nimport { Task } from '../models/task';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CalService {\r\n\r\n  private serviceUrl: string = '';\r\n\r\n  constructor(private http: HttpClient,\r\n    private logService: LogService) {\r\n  }\r\n\r\n  init(serviceUrl: string) {\r\n    this.serviceUrl = serviceUrl;\r\n  }\r\n\r\n  /**************************************************************************\r\n   * GET /cal/task/byUciTaskId/${uciTaskId}\r\n   **************************************************************************/\r\n  getTask(uciTaskId: string): Observable<Task> {\r\n    this.logService.debug('CalService.getTask');\r\n    const url = Util.urlJoin(this.serviceUrl, '/cal/task/byUciTaskId/' + uciTaskId);\r\n\r\n    return this.http.get<Task>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retrieved Task successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * PUT /cal/task/${uciTaskId}/byUciTaskId/${uciTaskId}\r\n   **************************************************************************/\r\n  addTaskToPlan(planId: string, uciTaskId: string) {\r\n    this.logService.debug('CalService.addTaskToPlan');\r\n    const url = Util.urlJoin(this.serviceUrl, '/cal/task/' + planId + '/byUciTaskId/' + uciTaskId);\r\n\r\n    return this.http.put(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    added Task successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * PUT /cal/task/reject/byUciTaskId/${uciTaskId}\r\n   **************************************************************************/\r\n  rejectTask(uciTaskId: string) {\r\n    this.logService.debug('CalService.rejectTask');\r\n    const url = Util.urlJoin(this.serviceUrl, '/cal/task/reject/byUciTaskId/' + uciTaskId);\r\n\r\n    return this.http.put(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    Task rejected successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * Send task request\r\n   * PUT cal/task/{eventId}/{planId}\r\n   **************************************************************************/\r\n  sendTaskingRequest(eventId: string, planId: string) {\r\n    this.logService.debug('CalService.sendTaskRequest');\r\n    const url = Util.urlJoin(this.serviceUrl, `/cal/task/${eventId}/${planId}`);\r\n    console.log('   ' + url);\r\n\r\n    return this.http.put(url, '', { responseType: 'text' }).pipe(\r\n      tap(res => this.logService.debug(`    task request sent`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\nimport { Util } from '../other/util';\r\nimport { LogService } from './log.service';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DraftPlanService {\r\n\r\n  private serviceUrl: string = '';\r\n\r\n  constructor(private http: HttpClient,\r\n    private logService: LogService) {\r\n  }\r\n\r\n  init(serviceUrl: string) {\r\n    this.serviceUrl = serviceUrl;\r\n  }\r\n\r\n  /**************************************************************************\r\n   * POST /plan/draftPlan/${planId}\r\n\r\n   **************************************************************************/\r\n  draftPlan(planId: string): Observable<string> {\r\n    this.logService.debug('PlanService.draftPlan');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/draftPlan/' + planId);\r\n\r\n    return this.http.post<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    added PlanAsset successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n}\r\n","import * as _ from 'lodash';\r\n\r\nexport class PlanMinTaskData {\r\n    assetEntityId: string = '';\r\n    assetName: string = '';\r\n    capability: string = '';\r\n    capabilityId: string = '';\r\n    missionTaskId: string = '';\r\n    targetEntityId: string = '';\r\n    targetName: string = '';\r\n    startTime: Date = new Date();\r\n    endTime: Date = new Date();\r\n    \r\n    //NEW SERVICE PROPERTIES\r\n    planId: string;\r\n    isPlanned: false;\r\n    missionUuid: string;\r\n    name: string;\r\n    planStatus: string;\r\n    type: string;\r\n    hmiTypeName:string;\r\n\r\n    constructor(json?: any) {\r\n        if (json) {\r\n            this.assetEntityId = _.isNil(json.assetEntityId) ? '' : json.assetEntityId;\r\n            this.assetName = _.isNil(json.assetName) ? '' : json.assetName;\r\n            this.capability = _.isNil(json.capability) ? '' : json.capability;\r\n            this.capabilityId = _.isNil(json.capabilityId) ? '' : json.capabilityId;\r\n            this.missionTaskId = _.isNil(json.missionTaskId) ? '' : json.missionTaskId;\r\n            this.targetEntityId = _.isNil(json.targetEntityId) ? '' : json.targetEntityId;\r\n            this.targetName = _.isNil(json.targetName) ? '' : json.targetName;\r\n            this.startTime = new Date(json.startTime);\r\n            this.endTime = new Date(json.endTime);\r\n            this.isPlanned = json.isPlanned;\r\n\r\n            // DELETE:\r\n            this.assetEntityId = this.assetEntityId.trim();\r\n            this.targetEntityId = this.targetEntityId.trim();\r\n\r\n            //NEW SERVICE PROPERTIES\r\n            this.planId = _.isNil(json.planId) ? '' : json.planId;\r\n            this.isPlanned = _.isNil(json.isPlanned) ? false : json.isPlanned;\r\n            this.missionUuid = _.isNil(json.missionUuid) ? '' : json.missionUuid;\r\n            this.name = _.isNil(json.name) ? '' : json.name;\r\n            this.planStatus = _.isNil(json.planStatus) ? '' : json.planStatus;\r\n            this.type = _.isNil(json.type) ? '' : json.type;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\nimport { Util } from '../other/util';\r\nimport { LogService } from './log.service';\r\nimport { PlanMinTaskData } from '../models/plan';\r\nimport { PlanAsset } from '../models/planAsset';\r\nimport { MissionTask } from '../models/missionTask';\r\nimport { OptimizationObjective } from '../models/optimizationObjective';\r\nimport { OptimizationMetric } from '../models/optimizationMetric';\r\nimport { AccessWindow } from '../models/accessWindow';\r\nimport { TaskConstraint } from '../models/taskConstraint';\r\nimport { DisplayWindow } from '../models/displayWindow';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PlanService {\r\n\r\n  private serviceUrl: string = '';\r\n\r\n  constructor(private http: HttpClient,\r\n    private logService: LogService) {\r\n  }\r\n\r\n  init(serviceUrl: string) {\r\n    this.serviceUrl = serviceUrl;\r\n  }\r\n\r\n  /**************************************************************************\r\n   * GET /min/task/byPlanId/${planId}\r\n   * get PlanMinTaskData\r\n   **************************************************************************/\r\n  getMinTaskDataByPlanId(planId: string): Observable<PlanMinTaskData[]> {\r\n    // const url = `${this.serviceUrl}/plan/min/task/byPlanId/${planId}`;\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/min/task/byPlanId/', planId);\r\n    this.logService.debug(`PlanService.getMinTaskDataByPlanId()`);\r\n\r\n    return this.http.get<PlanMinTaskData[]>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived PlanMinTaskData for planId ${planId}`, res)),\r\n      map(res => res['planMinTaskData'].map(item => new PlanMinTaskData(item)))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * POST /min/task/byPlanId/${planId}\r\n   * create PlanMinTaskData\r\n   **************************************************************************/\r\n  createMinTaskDataByPlanId(planId: string, plan: PlanMinTaskData): Observable<PlanMinTaskData[]> {\r\n    // const url = `${this.serviceUrl}/plan/min/task/byPlanId/${planId}`;\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/min/task/byPlanId/', planId);\r\n    this.logService.debug(`PlanService.createMinTaskDataByPlanId()`);\r\n\r\n    return this.http.post<PlanMinTaskData[]>(url, plan, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    created PlanMinTaskData for planId ${planId}`, res)),\r\n      map(res => res['planMinTaskData'].map(item => new PlanMinTaskData(item)))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * PUT /plan/min/task/byPlanId/${planId}\r\n   * update PlanMinTaskData\r\n   **************************************************************************/\r\n  updatePlanMinTaskData(planId: string, plan: PlanMinTaskData): Observable<PlanMinTaskData[]> {\r\n    // const url = `${this.serviceUrl}/plan/min/task/byPlanId/${planId}`;\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/min/task/byPlanId/', planId);\r\n    this.logService.debug(`PlanService.updatePlanMinTaskData()`);\r\n\r\n    return this.http.put<PlanMinTaskData[]>(url, plan, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    updated planId ${planId}`, res)),\r\n      map(res => res['planMinTaskData'].map(item => new PlanMinTaskData(item)))\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * DELETE /plan/min/task/byPlanId/${planId}\r\n   * delete PlanMinTaskData\r\n   **************************************************************************/\r\n  deletePlanMinTaskData(planId: string, plan: PlanMinTaskData): Observable<any> {\r\n    // const url = `${this.serviceUrl}/plan/missionTarget/byPlanId/${planId}`;\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/missionTarget/byPlanId/', planId);\r\n    this.logService.debug(`PlanService.deletePlanMinTaskData()`);\r\n    let bodyData = { strings: [plan.missionTaskId] };\r\n\r\n    // HACK: the whole PlanMinTaskData stuff is all hacked up. Revisit this at some point\r\n    return this.http.request<any>('DELETE', url, { ...httpOptions, body: bodyData }).pipe(\r\n      tap(res => this.logService.debug(`    deleted planId ${planId}`))\r\n    );\r\n  }\r\n\r\n  loadByMissionId(id: string): Observable<PlanMinTaskData[]> {\r\n    this.logService.debug('PlanService.loadByMissionId');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/byMissionId/' + id);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived event model ${name}`, res)),\r\n      map(res => res.plans)\r\n    );\r\n  }\r\n\r\n  planAssetsByPlanId(id: string): Observable<PlanAsset[]> {\r\n    this.logService.debug('PlanService.planAssetsByPlanId');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/planAssets/' + id);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived event model ${name}`, res)),\r\n      map(res => res.planAssets)\r\n    );\r\n  }\r\n\r\n  missionTaskDisplay(id: string): Observable<MissionTask[]> {\r\n    this.logService.debug('PlanService.missionTaskDisplay');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/missionTaskDisplay/byPlanId/' + id);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived event model ${name}`, res)),\r\n      map(res => res.missionTasks)\r\n    );\r\n  }\r\n\r\n  addMissionTaskToPlan(planId: string, entityIds: string[]): Observable<MissionTask[]> {\r\n    this.logService.debug('PlanService.addMissionTaskToPlan');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/missionTask/byPlanId/' + planId);\r\n\r\n    let param = {\r\n      'strings': entityIds\r\n    };\r\n\r\n    return this.http.post<any>(url, param, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retreived event model ${name}`, res)),\r\n      map(res => res.missionTasks)\r\n    );\r\n  }\r\n\r\n  removeMissionTasksFromPlan(planId: string, strings: string[]): Observable<MissionTask[]> {\r\n    this.logService.debug('PlanService.removeMissionTasksFromPlan');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/missionTask/byPlanId/' + planId);\r\n\r\n    const deleteOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: {\r\n        strings: strings\r\n      }\r\n    };\r\n\r\n    return this.http.delete<any>(url, deleteOptions).pipe(\r\n      tap(res => this.logService.debug(`    deleted tasks successfully`)),\r\n      map(res => res.missionTasks)\r\n    );\r\n  }\r\n\r\n  copyPlan(plan: PlanMinTaskData): Observable<string> {\r\n    this.logService.debug('PlanService.copyPlan');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/copy/byPlanId/' + plan.planId);\r\n\r\n    return this.http.put(url, plan, { ...httpOptions, responseType: 'text' }).pipe(\r\n      tap(res => this.logService.debug(`    added plan successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  getByPlanId(planId: string): Observable<PlanMinTaskData> {\r\n    this.logService.debug('PlanService.getByPlanId');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/byPlanId/' + planId);\r\n\r\n    return this.http.get<PlanMinTaskData>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retrieved plan successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  updatePlanAssets(planAssets: PlanAsset[]): Observable<PlanAsset[]> {\r\n    this.logService.debug('PlanService.addPlanAsset');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/planAssets');\r\n\r\n    let param = {\r\n      'planAssets': planAssets\r\n    };\r\n\r\n    return this.http.put<any>(url, param, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    added PlanAsset successfully`)),\r\n      map(res => res.planAssets)\r\n    );\r\n  }\r\n\r\n  getOptimizationObjectives(planId: string): Observable<OptimizationObjective> {\r\n    this.logService.debug('PlanService.getOptimizationObjectives');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/optimizationObjectives/byPlanId/' + planId);\r\n\r\n    return this.http.get<OptimizationObjective>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retrieved Optimization Objectives successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  getOptimizationMetrics(planId: string): Observable<OptimizationMetric> {\r\n    this.logService.debug('PlanService.getOptimizationMetrics');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/metrics/byPlanId/' + planId);\r\n\r\n    return this.http.get<OptimizationMetric>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retrieved Optimization Metrics successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  deletePlan(planId: string): Observable<string> {\r\n    this.logService.debug('PlanService.deletePlan');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/byPlanId/' + planId);\r\n\r\n    const deleteOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n    };\r\n\r\n    return this.http.delete<string>(url, deleteOptions).pipe(\r\n      tap(res => this.logService.debug(`    deleted plan successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  updatePlan(plan: PlanMinTaskData): Observable<PlanMinTaskData> {\r\n    this.logService.debug('PlanService.updatePlan');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan');\r\n\r\n    return this.http.put<any>(url, plan, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    updated Plan successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  getRequestWindows(planId: string): Observable<AccessWindow[]> {\r\n    this.logService.debug('PlanService.getRequestWindow');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/requestWindows/byPlanId/' + planId);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retrieved Request Windows successfully`)),\r\n      map(res => res.accessWindows)\r\n    );\r\n  }\r\n\r\n  getDisplayWindows(planId: string): Observable<DisplayWindow[]> {\r\n    this.logService.debug('PlanService.getDisplayWindows');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/display/requestWindows/byPlanId/' + planId);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retrieved Request Windows successfully`)),\r\n      map(res => res.displayWindows)\r\n    );\r\n  }\r\n\r\n  getTaskConstraints(planId: string): Observable<TaskConstraint[]> {\r\n    this.logService.debug('PlanService.getTaskConstraints');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/task/constraints/byPlanId/' + planId);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retrieved Task Constraint  successfully`)),\r\n      map(res => res.planMissionTaskConstaintsGroups)\r\n    );\r\n  }\r\n\r\n  updateTaskConstraints(constraints: TaskConstraint): Observable<TaskConstraint> {\r\n    this.logService.debug('PlanService.updateTaskConstraints');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/task/constraints');\r\n\r\n    return this.http.put<any>(url, constraints, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    updated Task Constraint  successfully`)),\r\n      map(res => res.planMissionTaskConstaintsGroups)\r\n    );\r\n  }\r\n\r\n  updateOptimizationObjectives(optimizationObjective: OptimizationObjective): Observable<OptimizationObjective> {\r\n    this.logService.debug('PlanService.updateOptimizationObjectives');\r\n    const url = Util.urlJoin(this.serviceUrl, '/plan/optimizationObjectives');\r\n\r\n    return this.http.put<any>(url, optimizationObjective, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    updated Optimization Objectives successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LogService } from './log.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProgressService {\r\n\r\n  pendingRequests: number = 0;\r\n  containerName = 'progressContainer';\r\n  element: HTMLElement = null;\r\n\r\n  constructor(\r\n    private logService: LogService) {\r\n  }\r\n\r\n  getElement() {\r\n    if (this.element == null) {\r\n      this.logService.debug('Default element for progress spinner = \"' + this.containerName + '\"');\r\n      this.element = document.getElementById(this.containerName);\r\n      \r\n      if (!this.element) {\r\n        this.logService.debug('Progress spinner element not found.  Ensure element is included in document.');\r\n      }\r\n    }\r\n\r\n    return this.element;\r\n  }\r\n\r\n  setBusy(isBusy: boolean) {\r\n    if (isBusy) {\r\n      //Keep track of how many requests there have been to show the busy message.\r\n      this.pendingRequests++;\r\n      //If force is true show the busy message immediately.\r\n      this.setVisible(true);\r\n    }\r\n    else {\r\n      //Keep track of how many requests there have been to hide the busy message.\r\n      if (this.pendingRequests > 0) {\r\n        this.pendingRequests--;\r\n      }\r\n\r\n      //If there is no more outstanding busy requests or if force is true then hide the busy message.\r\n      if (this.pendingRequests <= 0) {\r\n        this.setVisible(false);\r\n        this.pendingRequests = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  //Control the visibility of the busy message div.\r\n  setVisible(isVisible: boolean) {\r\n    try {\r\n      if (isVisible) {\r\n        this.getElement().style.display = 'flex';\r\n      }\r\n      else {\r\n        this.getElement().style.display = 'none';\r\n      }\r\n    }\r\n    catch(err) {\r\n      this.logService.warn('Unable to display spinner.  Is \"ags-lib-progress\" component included?');\r\n    }\r\n  }\r\n}\r\n","/*-----------------------------------------------------------------------------\r\n*  The Boeing Company\r\n*\r\n*  Copyright (c) 2017 The Boeing Company  All rights reserved.\r\n*----------------------------------------------------------------------------*/\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { LogService } from './log.service';\r\nimport { Task } from '../models/task';\r\nimport { Util } from '../other/util';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\nexport class TaskOrderService {\r\n\r\n    private serviceUrl: string = '';\r\n\r\n    constructor(private http: HttpClient, private logService: LogService) { }\r\n\r\n    init(serviceUrl: string) {\r\n        this.serviceUrl = serviceUrl;\r\n    }\r\n\r\n    createTask(task: Task): Observable<Task> {\r\n        this.logService.debug('TaskService.createTask');\r\n        const url = Util.urlJoin(this.serviceUrl, '/taskingOrder');\r\n        return this.http.post<Task>(url, task, httpOptions).pipe(\r\n            tap(res => this.logService.debug(`    retreived event model ${name}`, res))\r\n        );\r\n    }\r\n\r\n    loadAll(type: string): Observable<Task[]> {\r\n        this.logService.debug('TaskService.loadAll');\r\n        const url = Util.urlJoin(this.serviceUrl, '/taskingOrder/allOrders?type=' + type);\r\n\r\n        return this.http.get<any>(url, httpOptions).pipe(\r\n            tap(res => this.logService.debug(`    retreived event model ${name}`, res)),\r\n            map(res => res.taskingOrders)\r\n        );\r\n    }\r\n\r\n    loadById(id: string): Observable<Task> {\r\n        this.logService.debug('TaskService.loadById');\r\n        const url = Util.urlJoin(this.serviceUrl, '/taskingOrder/' + id);\r\n\r\n        return this.http.get<Task>(url, httpOptions).pipe(\r\n            tap(res => this.logService.debug(`    retreived event model ${name}`, res)),\r\n            map(res => res)\r\n        );\r\n    }\r\n\r\n    deleteTaskingOrder(id: string): Observable<string> {\r\n        this.logService.debug('TaskService.deleteTaskingOrder');\r\n        const url = Util.urlJoin(this.serviceUrl, '/taskingOrder/' + id);\r\n\r\n        const deleteOptions = {\r\n          headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n        };\r\n\r\n        return this.http.delete<string>(url, deleteOptions).pipe(\r\n          tap(res => this.logService.debug(`    deleted task order successfully`)),\r\n          map(res => res)\r\n        );\r\n      }\r\n\r\n    updateTaskingOrder(task: Task): Observable<Task> {\r\n        this.logService.debug('TaskService.updateTaskingOrder');\r\n        const url = Util.urlJoin(this.serviceUrl, '/taskingOrder');\r\n\r\n        return this.http.put<Task>(url, task, httpOptions).pipe(\r\n            tap(res => this.logService.debug(`     updated task ${task.taskingOrderUuid}`)),\r\n            map(res => res)\r\n        );\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TimeService {\r\n\r\n    serviceUrl: string = '';\r\n\r\n    constructor(\r\n        private http: HttpClient) {\r\n    }\r\n\r\n    init(serviceUrl: string) {\r\n        this.serviceUrl = serviceUrl;\r\n    }\r\n\r\n    getTime(): Observable<any> {\r\n\r\n        return this.http.get(this.serviceUrl, { responseType: 'text' })\r\n          .pipe(map(\r\n            res => res\r\n          ));\r\n    \r\n      }\r\n\r\n}","/*-----------------------------------------------------------------------------\r\n*  The Boeing Company\r\n*\r\n*  Copyright (c) 2017 The Boeing Company  All rights reserved.\r\n*----------------------------------------------------------------------------*/\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HeaderService {\r\n\r\n  public appName: string;\r\n  public headerTitle: BehaviorSubject<string>;\r\n  public breadcrumb: BehaviorSubject<object>;\r\n  private _headerPrimaryTitle = '';\r\n  private _headerSubTitle = '';\r\n\r\n  public set headerPrimaryTitle(value) {\r\n    this._headerPrimaryTitle = value;\r\n    this.titleService.setTitle(value + ' - ' + this.appName); // this is what gets displayed in the browser tab\r\n    this.updateHeaderTitle();\r\n  }\r\n\r\n  public set headerSubTitle(value) {\r\n    this._headerSubTitle = value;\r\n    this.updateHeaderTitle();\r\n    this.updateBreadcrumb();\r\n  }\r\n\r\n  constructor(private titleService: Title) {\r\n    this.headerTitle = new BehaviorSubject<string>(titleService.getTitle());\r\n    this.breadcrumb = new BehaviorSubject<object>({});\r\n  }\r\n\r\n  init(appName: string) {\r\n    this.appName = appName;\r\n  }\r\n\r\n  // see https://kendaleiv.com/subscribing-to-browser-title-changes-using-angular/\r\n  updateHeaderTitle() {\r\n    let title = this._headerPrimaryTitle;\r\n    if (this._headerSubTitle) {\r\n      title += ' [' + this._headerSubTitle + ']';\r\n    }\r\n    this.headerTitle.next(title);\r\n  }\r\n\r\n  /*\r\n   * Updates the breadcrumb when the title is updated.\r\n   *\r\n   * @returns {object} An object consisting of the primary title, and the subtitle\r\n   */\r\n  updateBreadcrumb() {\r\n    this.breadcrumb.next({\r\n      primaryTitle: this._headerPrimaryTitle,\r\n      subtitle: this._headerSubTitle,\r\n    });\r\n  }\r\n}\r\n","/*-----------------------------------------------------------------------------\r\n*  The Boeing Company\r\n*\r\n*  Copyright (c) 2017 The Boeing Company  All rights reserved.\r\n*----------------------------------------------------------------------------*/\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { LogService } from './log.service';\r\nimport { Util } from '../other/util';\r\nimport { PlanCollection } from '../models/planCollection';\r\nimport { PlanCollectionType } from '../models/planCollectionType';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PlanCollectionService {\r\n\r\n    private serviceUrl: string = '';\r\n\r\n    constructor(private http: HttpClient, private logService: LogService) { }\r\n\r\n    init(serviceUrl: string) {\r\n        this.serviceUrl = serviceUrl;\r\n    }\r\n\r\n    loadAll(): Observable<PlanCollection[]> {\r\n        this.logService.debug('PlanCollectionService.loadAll');\r\n        const url = Util.urlJoin(this.serviceUrl, '/PlanCollection');\r\n\r\n        return this.http.get<any>(url, httpOptions).pipe(\r\n            tap(res => this.logService.debug(`    retreived event model ${name}`, res)),\r\n            map(res => res.planCollections)\r\n        );\r\n    }\r\n\r\n    loadAllTypes(): Observable<PlanCollectionType[]> {\r\n        this.logService.debug('PlanCollectionService.loadAllTypes');\r\n        const url = Util.urlJoin(this.serviceUrl, '/PlanCollection/Type');\r\n\r\n        return this.http.get<any>(url, httpOptions).pipe(\r\n            tap(res => this.logService.debug(`    retreived plan collection types ${name}`, res)),\r\n            map(res => res.planTypes)\r\n        );\r\n    }\r\n\r\n    getAssetGroupType(missionType: string): Observable<string> {\r\n        this.logService.debug('PlanCollectionService.loadAllTypes');\r\n\r\n        return this.loadAllTypes().pipe(\r\n            tap(res => this.logService.debug(`    retreived plan collection types ${name}`, res)),\r\n            map(res => res.filter(p => p.hmiName === missionType)[0].assetGroup1)\r\n        );\r\n    }\r\n\r\n    loadById(missionId: string): Observable<PlanCollection> {\r\n        this.logService.debug('PlanCollectionService.loadById');\r\n        const url = Util.urlJoin(this.serviceUrl, '/PlanCollection/byId/' + missionId);\r\n\r\n        return this.http.get<PlanCollection>(url, httpOptions).pipe(\r\n            tap(res => this.logService.debug(`    retreived event model ${name}`, res)),\r\n            map(res => res)\r\n        );\r\n    }\r\n\r\n    create(planCollection: PlanCollection): Observable<PlanCollection> {\r\n        this.logService.debug('PlanCollectionService.createPlanCollection');\r\n        const url = Util.urlJoin(this.serviceUrl, '/PlanCollection');\r\n        return this.http.post<PlanCollection>(url, planCollection, httpOptions).pipe(\r\n            tap(res => this.logService.debug(`    cerated Plan Collection ${name}`, res))\r\n        );\r\n    }\r\n\r\n    delete(id: string): Observable<string> {\r\n        this.logService.debug('PlanCollectionService.deletePlanCollection');\r\n        const url = Util.urlJoin(this.serviceUrl, '/PlanCollection/byId/' + id);\r\n\r\n        const deleteOptions = {\r\n            headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n        };\r\n\r\n        return this.http.delete<string>(url, deleteOptions).pipe(\r\n            tap(res => this.logService.debug(`    deleted Plan Collection successfully`)),\r\n            map(res => res)\r\n        );\r\n    }\r\n\r\n    update(planCollection: PlanCollection): Observable<PlanCollection> {\r\n        this.logService.debug('PlanCollectionService.updatePlanCollection');\r\n        const url = Util.urlJoin(this.serviceUrl, '/PlanCollection');\r\n\r\n        return this.http.put<PlanCollection>(url, planCollection, httpOptions).pipe(\r\n            tap(res => this.logService.debug(`     updated Plan Collection ${planCollection.missionUUId}`)),\r\n            map(res => res)\r\n        );\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Util } from '../other/util';\r\nimport { LogService } from './log.service';\r\nimport { tap, map } from 'rxjs/operators';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CzmlService {\r\n  private serviceUrl: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private logService: LogService\r\n  ) { }\r\n\r\n  init(serviceUrl: string) {\r\n    this.serviceUrl = serviceUrl;\r\n  }\r\n\r\n  getGroundTrackAndSensorVolume(planId: string, targetId: string, missionId?: string): Observable<any> {\r\n    let endpoint = `/czml/groundTrackAndSensorVolume/${planId}/${targetId}`;\r\n\r\n    if (missionId) {\r\n      endpoint = `${endpoint}/${missionId}`;\r\n    }\r\n\r\n    const url = Util.urlJoin(this.serviceUrl, endpoint);\r\n    this.logService.debug('CzmlService.getGroundTrackAndSensorVolume()');\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug('    retrieved Czml')),\r\n      map(res => res),\r\n    );\r\n  }\r\n\r\n  /**\r\n  * Handle http operation that failed.\r\n  *\r\n  * @param operation {string} name of the operation that failed\r\n  * @param result {any} optional value to return as the observable result\r\n  */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      this.logService.error(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\nimport { Util } from '../other/util';\r\nimport { LogService } from './log.service';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SchedulerService {\r\n\r\n  private serviceUrl: string = '';\r\n\r\n  constructor(private http: HttpClient,\r\n    private logService: LogService) {\r\n  }\r\n\r\n  init(serviceUrl: string) {\r\n    this.serviceUrl = serviceUrl;\r\n  }\r\n\r\n  /**************************************************************************\r\n   * GET /schedule/solverTypes/${missionType}\r\n   **************************************************************************/\r\n  getSolverTypes(missionType: string): Observable<string[]> {\r\n    this.logService.debug('SchedulerService.getSolverTypes');\r\n    const url = Util.urlJoin(this.serviceUrl, '/schedule/solverTypes/' + missionType);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    retrieved Solver Types successfully`)),\r\n      map(res => res.strings)\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\nimport { Util } from '../other/util';\r\nimport { LogService } from './log.service';\r\nimport { SpsEvent } from '../models/spsEvent';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExternalScheduleService {\r\n\r\n  private serviceUrl: string = '';\r\n\r\n  constructor(private http: HttpClient,\r\n    private logService: LogService) {\r\n  }\r\n\r\n  init(serviceUrl: string) {\r\n    this.serviceUrl = serviceUrl;\r\n  }\r\n\r\n  /**************************************************************************\r\n  * POST /runInternalScheduler/${planId}\r\n  **************************************************************************/\r\n  runInternalScheduler(planId: string): Observable<string> {\r\n    this.logService.debug('ExternalScheduleService.runInternalScheduler');\r\n    const url = Util.urlJoin(this.serviceUrl, '/runInternalScheduler/' + planId);\r\n\r\n    return this.http.post<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    RunInternal Scheduler successfull`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n  * POST /publishToLaso/${planId}\r\n  **************************************************************************/\r\n  publishToLaso(planId: string): Observable<string> {\r\n    this.logService.debug('ExternalScheduleService.publishToLaso');\r\n    const url = Util.urlJoin(this.serviceUrl, '/publishToLaso/' + planId);\r\n\r\n    return this.http.post<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    Published To Laso successfully`)),\r\n      map(res => res.status)\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n  * POST /spsEvent/${planId}\r\n  **************************************************************************/\r\n  create(spsEvent: SpsEvent): Observable<string> {\r\n    this.logService.debug('ExternalScheduleService.spsEvent');\r\n    const url = Util.urlJoin(this.serviceUrl, '/spsEvent');\r\n\r\n    return this.http.post<any>(url, spsEvent, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    Stored sps Event successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n  * POST /publishToLaso/${planId}\r\n  **************************************************************************/\r\n  getLasoProhibit(prohibitId: string): Observable<SpsEvent> {\r\n    this.logService.debug('ExternalScheduleService.getLasoProhibit');\r\n    const url = Util.urlJoin(this.serviceUrl, '/getLasoProhibit/' + prohibitId);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    Retrieved Laso Prohibit successfully`)),\r\n      map(res => res)\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n  * POST /assetsWithMx/${planId}\r\n  **************************************************************************/\r\n  getAssetsWithMx(planId: string): Observable<string[]> {\r\n    this.logService.debug('ExternalScheduleService.assetsWithMx');\r\n    const url = Util.urlJoin(this.serviceUrl, '/assetsWithMx/' + planId);\r\n\r\n    return this.http.get<any>(url, httpOptions).pipe(\r\n      tap(res => this.logService.debug(`    Retrieved assets with Mx successfully`)),\r\n      map(res => res.strings)\r\n    );\r\n  }\r\n\r\n}\r\n","export class AccessWindowLimit {\r\n    capabilityId: string;\r\n    elevationMaxLimit: number;\r\n    earthLimbAltLimit: number;\r\n    rangeObservable: number;\r\n    qualityScore: number;\r\n    lunarExclusionAngle: number;\r\n    applyLightingConstraints: boolean;\r\n    solarExclusionAngle: number;\r\n    applySolarDarknessConstraint: boolean;\r\n    rangeTaskable: number;\r\n    rangeMax: number;\r\n    rangeMaxObservable:\tnumber;\r\n    rangeMin: number;\r\n    elevationMinLimit: number;\r\n    boresightOffAngle: number;\r\n    boresight: number;\r\n    azimuthMinLimit: number;\r\n    azimuthMaxLimit: number;\r\n}\r\n","import { PlanSubType } from './planSubType';\r\nimport { AlertType } from './alertType';\r\nimport { TaskSubType } from './taskSubType';\r\n\r\nexport class Alert {\r\n\r\n    alertType: AlertType;\r\n    description: string;\r\n    uuid: string;\r\n    planSubType: {\r\n        type: PlanSubType,\r\n    };\r\n    taskSubType: TaskSubType;\r\n    domain: string;\r\n    assetStatusSubType: {\r\n        statusType: string;\r\n        uuid: string;\r\n        type: string;\r\n        assetName: string;\r\n        assetId: string;\r\n        assetType: string;\r\n        assetState: string;\r\n        domain: string;\r\n        owner: string;\r\n        capabilityStatusList: {\r\n            capabilityStatusSummaries: {\r\n                capabilityID: string;\r\n                capabilityType: string;\r\n                capabilityStatus: string;\r\n                effectiveTime: string; \r\n            }\r\n        }\r\n        assetPosition: {\r\n            source: string;\r\n            orbitType: string;\r\n            latitude: string;\r\n            longitude: string;\r\n            altitude: string;\r\n        }\r\n        lastUpdateTime: string;\r\n    }\r\n}\r\n","export class MissionData {\r\n    endTime: string;\r\n    name: string;\r\n    startTime: string;\r\n    commanderGuidance: string;\r\n    missionUuid: string;\r\n}\r\n","import { TaskConstraint } from './taskConstraint';\r\nimport { Group, Entity } from './entity';\r\n\r\nexport class MissionTarget {\r\n    primaryTaskId: string;\r\n    groups: Group[];\r\n    entitys: any[];\r\n\r\n    coaUuid: string;\r\n    missionPairUuid: string;\r\n    capability: string;\r\n    numberOfCollects: number;\r\n    priority: number;\r\n    taskType: string;\r\n    optTrackingId: string;\r\n    optimizer: string;\r\n    platformUuid: string;\r\n    targetCategoryId: number;\r\n    targetEntityId: string;\r\n    previousTaskUuid: string;\r\n    relativeNoEarlierThan: number;\r\n    relativeNoLaterThan: number;\r\n    primaryTask: string;\r\n\r\n    targetConstraints: TaskConstraint;\r\n    accessWindows: Window[];\r\n    requestWindows: Window[];\r\n\r\n\r\n    //implement this object when known\r\n    supportTasks: any;\r\n}\r\n","export class MissionTask {\r\n    capability: string;\r\n    earliestStartTime: string;\r\n    missionTaskId: string;\r\n    priority: string;\r\n    targetEntityId: string;\r\n    targetName: string;\r\n}\r\n","export class OptimizationMetric {\r\n    planId: string;\r\n    planDuration: number;\r\n    totalMissionTime: number;\r\n    totalTaskAttempts: number;\r\n    avgTaskTime: number;\r\n    medianTaskTime: number;\r\n    avgProbTaskSuccess: number;\r\n    minProbTaskSuccess: number;\r\n    avgProbTaskAttrib: number;\r\n    probMissionSuccess: number;\r\n    numResourcesUsed: number;\r\n    numTasksAssigned: number;\r\n    numTasksUnassigned: number;\r\n    planStartTime: string;\r\n    planEndTime: string;\r\n    optDebug: string;\r\n    username: string;\r\n}\r\n","export class OptimizationObjective {\r\n    isMinimizingNumberOfTasks: boolean;\r\n    logLevel: string;\r\n    optimizationMode: number;\r\n    optimizationTimeLimit: number;\r\n    optimizer: string;\r\n    planId: string;\r\n    probMissionSuccess: number;\r\n    weightingMissVsAveTaskTime: number;\r\n    weightingTimeVsQual: number;\r\n    planStartTime: string;\r\n    planEndTime: string;\r\n    schedulerMode: string;\r\n    maxTasksPerCycle:number;\r\n\r\n}\r\n","import { Group } from './entity';\r\nimport { MissionTarget } from './missionTarget';\r\n\r\nexport class PlanAsset {\r\n    byMissionTarget: MissionTarget[];\r\n    entitys: any[];\r\n    groups: Group[];\r\n    planId: string;\r\n    assetType: string;\r\n}\r\n","import { MissionData } from './missionData';\r\n\r\nexport class Task {\r\n    taskingOrderUuid: string;\r\n    uciTaskId: string;\r\n    name: string;\r\n    type: string;\r\n    missionData: MissionData[];\r\n\r\n    taskId: string;\r\n    taskDescription: string;\r\n    taskType: string;\r\n    entityId: string;\r\n    precedence: number;\r\n    priority: number;\r\n    approvalRequired: boolean;\r\n    status: string;\r\n    planId: string;\r\n\r\n}\r\n","\r\nexport class TaskSubType {\r\n    taskType: string;\r\n    uuid: string;\r\n}\r\n","import { OptimizationMetric } from './optimizationMetric';\r\nimport { MissionTarget } from './missionTarget';\r\n\r\nexport class Optimization {\r\n\r\n    missionUuid: string;\r\n    coaId: string;\r\n    coaName: string;\r\n    coaStatus: string;\r\n    draftCoaStartTime: any;\r\n    startTime: string;\r\n    endTime: string;\r\n    collectAssesCollect: boolean;\r\n    probabilityOfSuccess: number;\r\n    optimizerMessage: string;\r\n    optimizationMetricsUuid: string;\r\n    optimizationMetrics: OptimizationMetric;\r\n    missionTargets: MissionTarget;\r\n    coaObjectives: any;\r\n\r\n}\r\n","export class TaskConstraint {\r\n    targetConstraintUuid: string;\r\n    reservedA: string;\r\n    reservedB: string;\r\n    isCollectAssessCollect: true;\r\n    probabilityAttribution: number;\r\n    probabilityCollection: number;\r\n    probabilitySuccess: number;\r\n    earliestStartTime: string;\r\n    latestEndTime: string;\r\n    deconflictionConstraints: string;\r\n    useNonDedicated: true;\r\n\r\n    capability: string;\r\n    numberOfCollects: number;\r\n    priority: number;\r\n\r\n    missionTaskIds: string[];\r\n\r\n    bandwidth: string;\r\n    qualityThreshold: number;\r\n}\r\n","import { TimeWindow } from './timeWindow';\r\n\r\nexport class AccessWindow {\r\n\r\n    assetUuid: string;\r\n    missionTaskUuid: string;\r\n    targetUuid: string;\r\n    timeWindows:TimeWindow[];\r\n\r\n}","export class TimeWindow {\r\n\r\n    windowUuid: string;\r\n    startTime: string;\r\n    endTime: string;\r\n    windowType: string;\r\n    assetId: string;\r\n    probSuccess: number;\r\n    probAttribution: number;\r\n    preExecutionTime: number;\r\n    executionTime: number;\r\n    postExecutionTime: number;\r\n    required: true;\r\n    reasonLowerProbSuccess: string;\r\n    status: string;\r\n    revNumber: string;\r\n    numberOfCollects: number;\r\n    quality: number;\r\n}\r\n","export class PlanCollection {\r\n    missionUUId: string;\r\n    name: string;\r\n    hmiTypeName: string;\r\n    type: string;\r\n    startTime: string;\r\n    endTime: string;\r\n    commanderGuidance: string;\r\n    primaryPlan: string;\r\n    planStatus: string;\r\n    lastUserUpdate: string;\r\n    lastUpdateTime: string;\r\n}\r\n","export class PlanCollectionType {\r\n    planTypeId: string;\r\n    hmiName: string;\r\n    coaName: string;\r\n    assetGroup1: string;\r\n    assetGroup2: string;\r\n    assetGroup2Targets: string;\r\n    schedulerType: string\r\n}\r\n","export class DisplayWindow {\r\n    planId: string;\r\n    missionTaskId: string;\r\n    windowId: string;\r\n    assetId: string;\r\n    assetName: string;\r\n    assetParentId: string;\r\n    assetParentName: string;\r\n    targetId: string;\r\n    targetName: string;\r\n    capabilityId: string;\r\n    startTime: string;\r\n    endTime: string;\r\n    priority: number;\r\n    probabilityOfAttribution: number;\r\n    probabilityOfSuccess: number;\r\n    probabilityReason: string;\r\n    required: boolean;\r\n    status: string;\r\n    postExecutionTime: number;\r\n    executionTime: number;\r\n    preExecutionTime: number;\r\n    revolutionNumber: string;\r\n    numberOfCollects: number;\r\n    quality: number;\r\n    isPrimary: boolean;\r\n    windowType: string;\r\n    groupByName: string;\r\n    user: string\r\n}","export class SpsEvent{\r\n    planId: string;\r\n    assetName: string;\r\n    taskType: string;\r\n    startTime: string;\r\n    stopTime: string;\r\n    childAssets: any[];\r\n  }\r\n  ","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { LogService } from '../services/log.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private authenticationService: AuthenticationService,\r\n    private logService: LogService) {\r\n  }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n\r\n    if (!this.authenticationService.isLoggedIn) {\r\n      this.logService.debug('guard - not logged in!!');\r\n      this.authenticationService.redirectToLoginPage();\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// this is just a placeholder so that this file doesn't generate a compiler error.\r\n// once some real enums have been added to this file this enum can be deleted\r\nexport enum Sample {red = 1, white = 2, blue = 3}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { LogService } from '../services/log.service';\r\n\r\n/******************************************************************************\r\n * JWT Interceptor: Insert JWT into header of all requests\r\n******************************************************************************/\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authenticationService: AuthenticationService) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (request.url.indexOf(this.authenticationService.getAuthenticationServicePrefix()) === -1) {\r\n      request = request.clone({\r\n        // setHeaders: {\r\n        //   'token': this.authenticationService.token,\r\n        //   'UserName': this.authenticationService.currentUser\r\n        // }\r\n        headers: request.headers.set('token', this.authenticationService.token)\r\n      });\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n\r\n/******************************************************************************\r\n * Error Interceptor: Handle HTTP errors\r\n******************************************************************************/\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n\r\n  constructor(public authenticationService: AuthenticationService, private logService: LogService) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    let self = this;\r\n    return next.handle(request).pipe(\r\n      catchError(err => {\r\n        // NOTE: err.status is always 0. Research points to backend server not attaching CORS headers to response\r\n        // see this article https://daveceddia.com/access-control-allow-origin-cors-errors-in-angular/\r\n        // and this https://stackoverflow.com/questions/29547003/angularjs-no-access-control-allow-origin-header-is-present-on-the-requested-r\r\n        // adn this https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\r\n        if (err.status === 401) {\r\n          // auto logout if 401 response returned from api\r\n          this.authenticationService.logOut();\r\n        } else {\r\n          this.logService.error(`ErrorInterceptor: err.status = ${err.status}`, err);\r\n        }\r\n\r\n        const error = err.error.message || err.statusText;\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/******************************************************************************\r\n * Data Recorder Interceptor\r\n******************************************************************************/\r\n@Injectable()\r\nexport class CacheInterceptor implements HttpInterceptor {\r\n\r\n  constructor() { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    return next.handle(req).pipe(tap((event: HttpEvent<any>) => {\r\n      if (event instanceof HttpResponse) {\r\n        console.log(`>>>>>>>>>>>> CACHE INTERCEPTOR`, event);\r\n      }\r\n      return event;\r\n    }));\r\n\r\n  }\r\n}\r\n","import { Injectable, InjectionToken } from '@angular/core';\r\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class MockBackendInterceptor implements HttpInterceptor {\r\n\r\n    constructor() { }\r\n\r\n    sleep(millisecs) {\r\n        let initiation = new Date().getTime();\r\n        while ((new Date().getTime() - initiation) < millisecs) {}\r\n    }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // wrap in delayed observable to simulate server api call\r\n        return of(null).pipe(mergeMap(() => {\r\n\r\n            // example GET endpoint\r\n            if (request.url.endsWith('/exampleEndpoint') && request.method === 'GET') {\r\n                console.log(`MOCK ${request.url}`);\r\n                this.sleep(500);\r\n                let dataObj = [ { id: '1234', data: 'data goes here' }, { id: '5678', data: 'data goes here' } ];\r\n                if (dataObj) {\r\n                    return of(new HttpResponse({ status: 200, body: JSON.stringify(dataObj) }));\r\n                } else {\r\n                    return throwError({ error: { message: 'Error' } });\r\n                }\r\n            }\r\n\r\n            // example GET endpoint with id\r\n            if (request.url.match(/\\/exampleEndpoint\\/\\d+$/) && request.method === 'GET') {\r\n                console.log(`MOCK ${request.url}`);\r\n                this.sleep(500);\r\n                let urlParts = request.url.split('/');\r\n                let id = parseInt(urlParts[urlParts.length - 1]);\r\n                let dataObj = { id: id, data: 'data goes here' };\r\n                if (dataObj) {\r\n                    return of(new HttpResponse({ status: 200, body: JSON.stringify(dataObj) }));\r\n                } else {\r\n                    return throwError({ error: { message: 'Error' } });\r\n                }\r\n            }\r\n\r\n            // example POST endpoint\r\n            if (request.url.endsWith('/exampleEndpoint') && request.method === 'POST') {\r\n                let reqBody = request.body;\r\n                console.log(`MOCK ${request.url}`, reqBody);\r\n                this.sleep(500);\r\n                if (reqBody) {\r\n                    return of(new HttpResponse({ status: 200, body: JSON.stringify(reqBody) }));\r\n                } else {\r\n                    return throwError({ error: { message: 'Error' } });\r\n                }\r\n            }\r\n\r\n            // pass through any requests not handled above\r\n            return next.handle(request);\r\n\r\n        }));\r\n    }\r\n}\r\n\r\nexport let MockBackendProvider = {\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: MockBackendInterceptor,\r\n    multi: true\r\n};\r\n","import { FormGroup, AbstractControl, ValidatorFn, Validators, NG_VALIDATORS } from '@angular/forms';\r\nimport moment from 'moment-es6';\r\nimport * as _ from 'lodash';\r\n\r\n// you can get more validators from here https://github.com/yuyang041060120/ng2-validation\r\n\r\n\r\n// this validator must be applied to a FormGroup because it is comparing 2 controls\r\nfunction dateRangeValidator(startDateControlString: string, endDateControlString: string): ValidatorFn {\r\n    return (group: FormGroup): { [key: string]: boolean } | null => {\r\n        let startDateControl = group.controls[startDateControlString];\r\n        let endDateControl = group.controls[endDateControlString];\r\n        // tslint:disable-next-line:max-line-length\r\n        // console.log(`>>>>>>>>>>>>>>>>>>>>>>>>>>> DateRangeValidator(${startDateControlString}, ${endDateControlString}): from.value = ${startDateControl.value}, to.value = ${endDateControl.value}`);\r\n        if (moment(startDateControl.value).isAfter(endDateControl.value)) {\r\n            return { 'dateRange': true };\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nfunction dateLessThanValidator(compareControlString: string): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\r\n        if (!control.parent) { return; }\r\n        let compareDateControl = control.parent.controls[compareControlString];\r\n        // console.log(`>>>>>>>>>>>>>>>>>>>>>>>>>>> DateLessThanValidator(${compareControlString}): from.value = ${thisDateControl.value}, to.value = ${compareDateControl.value}`);\r\n        if (moment(control.value).isAfter(compareDateControl.value)) {\r\n            return { 'dateLessThan': true };\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nfunction dateGreaterThanValidator(compareControlString: string): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\r\n        if (!control.parent) { return; }\r\n        let compareDateControl = control.parent.controls[compareControlString];\r\n        // console.log(`>>>>>>>>>>>>>>>>>>>>>>>>>>> DateGreaterThanValidator(${compareControlString}): from.value = ${thisDateControl.value}, to.value = ${compareDateControl.value}`);\r\n        if (moment(control.value).isBefore(compareDateControl.value)) {\r\n            return { 'dateGreaterThan': true };\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nfunction maxNumLinesValidator(maxLines: number): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\r\n        if (_.isNil(maxLines) || !_.isNil(Validators.required(control))) {\r\n            return null;\r\n        }\r\n        \r\n        let numLines = (control.value as string).split('\\n').length;\r\n        if (numLines > maxLines) {\r\n            return { 'maxNumLines': true };\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nfunction lt(ltParam: number): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: boolean } => {\r\n        if (_.isNil(ltParam) || !_.isNil(Validators.required(control))) {\r\n            return null;\r\n        }\r\n\r\n        let v: number = +control.value;\r\n        return v < +ltParam ? null : { lt: true };\r\n    };\r\n}\r\n\r\nexport const CustomValidators = {\r\n    dateRangeValidator,\r\n    dateLessThanValidator,\r\n    dateGreaterThanValidator,\r\n    maxNumLinesValidator,\r\n    lt\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","export enum AlertType {\r\n    plan = 'PLAN',\r\n    timeUpdate = 'timeUpdate',\r\n    task = 'TASK',\r\n    assetStatus = 'ASSETSTATUS',\r\n    taskStatus = 'TASKSTATUS',\r\n    sps = \"SPS\",\r\n    sps_prohibit = \"SPS_PROHIBIT\",\r\n    es_prohibit = \"ES_PROHIBIT\"\r\n}","export enum PlanSubType {\r\n    update = 'UPDATE',\r\n    complete = 'DRAFT',\r\n    error = 'ERROR',\r\n    executing = 'Executing'\r\n}\r\n"]}